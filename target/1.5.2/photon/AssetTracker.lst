
/Users/AADAir/GitHub/AssetTracker/target/1.5.2/photon/AssetTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001f14  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1f30  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000700  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1f9c  080a1f9c  00021f9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1fc4  080a1fc4  00021fc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b02a1  00000000  00000000  00021fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fe7c  00000000  00000000  000d2269  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000fe3a  00000000  00000000  000e20e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d58  00000000  00000000  000f1f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002dc0  00000000  00000000  000f3c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000264a8  00000000  00000000  000f6a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025f13  00000000  00000000  0011cedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa837  00000000  00000000  00142df2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b100  00000000  00000000  001ed62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fda7 	bl	80a1b80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fdac 	bl	80a1b96 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1f34 	.word	0x080a1f34
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000768 	.word	0x20000768
 80a0058:	20000768 	.word	0x20000768

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f8cb 	bl	80a11f8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1eec 	.word	0x080a1eec
 80a0084:	080a1f30 	.word	0x080a1f30

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b811 	b.w	80a00ae <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f80f 	bl	80a00b0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b871 	b.w	80a117c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bc1d 	b.w	80a08d8 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <setup>:
 80a00ae:	4770      	bx	lr

080a00b0 <loop>:
  // Put initialization like pinMode and begin functions here.

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00b0:	4770      	bx	lr

080a00b2 <_GLOBAL__sub_I_setup>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00b2:	f000 ba71 	b.w	80a0598 <HAL_Pin_Map>
	...

080a00b8 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
 80a00b8:	4a15      	ldr	r2, [pc, #84]	; (80a0110 <_ZN12Adafruit_GPS11common_initEv+0x58>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80a00ba:	2300      	movs	r3, #0
  recvdflag   = false;
 80a00bc:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
 80a00be:	4a15      	ldr	r2, [pc, #84]	; (80a0114 <_ZN12Adafruit_GPS11common_initEv+0x5c>)
  currentline = line1;
 80a00c0:	4915      	ldr	r1, [pc, #84]	; (80a0118 <_ZN12Adafruit_GPS11common_initEv+0x60>)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
 80a00c2:	7013      	strb	r3, [r2, #0]
  currentline = line1;
 80a00c4:	4a15      	ldr	r2, [pc, #84]	; (80a011c <_ZN12Adafruit_GPS11common_initEv+0x64>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80a00c6:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
  currentline = line1;
 80a00c8:	6011      	str	r1, [r2, #0]
  lastline    = line2;
 80a00ca:	4915      	ldr	r1, [pc, #84]	; (80a0120 <_ZN12Adafruit_GPS11common_initEv+0x68>)
 80a00cc:	4a15      	ldr	r2, [pc, #84]	; (80a0124 <_ZN12Adafruit_GPS11common_initEv+0x6c>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
 80a00ce:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
  lastline    = line2;
 80a00d2:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 80a00d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80a00d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80a00dc:	7143      	strb	r3, [r0, #5]
 80a00de:	7103      	strb	r3, [r0, #4]
 80a00e0:	70c3      	strb	r3, [r0, #3]
 80a00e2:	7083      	strb	r3, [r0, #2]
 80a00e4:	7043      	strb	r3, [r0, #1]
 80a00e6:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
 80a00e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80a00ec:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80a00f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
 80a00f4:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
 80a00f8:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 80a00fa:	2300      	movs	r3, #0
 80a00fc:	6343      	str	r3, [r0, #52]	; 0x34
 80a00fe:	6303      	str	r3, [r0, #48]	; 0x30
 80a0100:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a0102:	6283      	str	r3, [r0, #40]	; 0x28
 80a0104:	6243      	str	r3, [r0, #36]	; 0x24
 80a0106:	6203      	str	r3, [r0, #32]
 80a0108:	60c3      	str	r3, [r0, #12]
 80a010a:	6083      	str	r3, [r0, #8]
 80a010c:	4770      	bx	lr
 80a010e:	bf00      	nop
 80a0110:	20000161 	.word	0x20000161
 80a0114:	20000070 	.word	0x20000070
 80a0118:	20000071 	.word	0x20000071
 80a011c:	2000006c 	.word	0x2000006c
 80a0120:	200000e9 	.word	0x200000e9
 80a0124:	20000164 	.word	0x20000164

080a0128 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 80a0128:	b538      	push	{r3, r4, r5, lr}
 80a012a:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
 80a012c:	f7ff ffc4 	bl	80a00b8 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
 80a0130:	64c5      	str	r5, [r0, #76]	; 0x4c
}
 80a0132:	bd38      	pop	{r3, r4, r5, pc}

080a0134 <_GLOBAL__sub_I_line1>:
 80a0134:	f000 ba30 	b.w	80a0598 <HAL_Pin_Map>

080a0138 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80a0138:	4770      	bx	lr

080a013a <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 80a013a:	4770      	bx	lr

080a013c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a013c:	b510      	push	{r4, lr}
 80a013e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0140:	6880      	ldr	r0, [r0, #8]
 80a0142:	b108      	cbz	r0, 80a0148 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0144:	f000 fa00 	bl	80a0548 <os_mutex_recursive_destroy>
 80a0148:	4620      	mov	r0, r4
 80a014a:	bd10      	pop	{r4, pc}

080a014c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 80a014c:	b538      	push	{r3, r4, r5, lr}
 80a014e:	460c      	mov	r4, r1
 80a0150:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80a0152:	2228      	movs	r2, #40	; 0x28
 80a0154:	2100      	movs	r1, #0
 80a0156:	4620      	mov	r0, r4
 80a0158:	f001 fd1d 	bl	80a1b96 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 80a015c:	220b      	movs	r2, #11
 80a015e:	4908      	ldr	r1, [pc, #32]	; (80a0180 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 80a0160:	4620      	mov	r0, r4
 80a0162:	f001 fd51 	bl	80a1c08 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 80a0166:	2300      	movs	r3, #0
  sensor->version     = 1;
 80a0168:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
 80a016a:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
 80a016c:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
 80a016e:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 80a0170:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
 80a0172:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
 80a0174:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 80a0176:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
 80a0178:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
 80a017a:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
 80a017c:	6223      	str	r3, [r4, #32]
 80a017e:	bd38      	pop	{r3, r4, r5, pc}
 80a0180:	080a1c44 	.word	0x080a1c44

080a0184 <_ZN15Adafruit_LIS3DHD0Ev>:
 80a0184:	b510      	push	{r4, lr}
 80a0186:	4604      	mov	r4, r0
 80a0188:	212c      	movs	r1, #44	; 0x2c
 80a018a:	f001 f928 	bl	80a13de <_ZdlPvj>
 80a018e:	4620      	mov	r0, r4
 80a0190:	bd10      	pop	{r4, pc}

080a0192 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0192:	6803      	ldr	r3, [r0, #0]
 80a0194:	b2c9      	uxtb	r1, r1
 80a0196:	689b      	ldr	r3, [r3, #8]
 80a0198:	4718      	bx	r3
	...

080a019c <_ZN15Adafruit_LIS3DHC1Ea>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
{
}

Adafruit_LIS3DH::Adafruit_LIS3DH(int8_t cspin)
  : _cs(cspin), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
 80a019c:	4a06      	ldr	r2, [pc, #24]	; (80a01b8 <_ZN15Adafruit_LIS3DHC1Ea+0x1c>)
 80a019e:	7741      	strb	r1, [r0, #29]
 80a01a0:	6002      	str	r2, [r0, #0]
 80a01a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a01a6:	6182      	str	r2, [r0, #24]
 80a01a8:	7782      	strb	r2, [r0, #30]
 80a01aa:	21ff      	movs	r1, #255	; 0xff
 80a01ac:	f880 2020 	strb.w	r2, [r0, #32]
 80a01b0:	2211      	movs	r2, #17
 80a01b2:	77c1      	strb	r1, [r0, #31]
 80a01b4:	6242      	str	r2, [r0, #36]	; 0x24
{ }
 80a01b6:	4770      	bx	lr
 80a01b8:	080a1c54 	.word	0x080a1c54

080a01bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a01bc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a01be:	4d0b      	ldr	r5, [pc, #44]	; (80a01ec <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a01c0:	6829      	ldr	r1, [r5, #0]
 80a01c2:	f011 0401 	ands.w	r4, r1, #1
 80a01c6:	d10f      	bne.n	80a01e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a01c8:	4628      	mov	r0, r5
 80a01ca:	f7ff ff68 	bl	80a009e <__cxa_guard_acquire>
 80a01ce:	b158      	cbz	r0, 80a01e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a01d0:	4621      	mov	r1, r4
 80a01d2:	4807      	ldr	r0, [pc, #28]	; (80a01f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a01d4:	f000 fd3d 	bl	80a0c52 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a01d8:	4628      	mov	r0, r5
 80a01da:	f7ff ff65 	bl	80a00a8 <__cxa_guard_release>
 80a01de:	4a05      	ldr	r2, [pc, #20]	; (80a01f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a01e0:	4905      	ldr	r1, [pc, #20]	; (80a01f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a01e2:	4803      	ldr	r0, [pc, #12]	; (80a01f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a01e4:	f001 f8f6 	bl	80a13d4 <__aeabi_atexit>
        return instance;
    }
 80a01e8:	4801      	ldr	r0, [pc, #4]	; (80a01f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a01ea:	bd38      	pop	{r3, r4, r5, pc}
 80a01ec:	20000168 	.word	0x20000168
 80a01f0:	2000016c 	.word	0x2000016c
 80a01f4:	20000068 	.word	0x20000068
 80a01f8:	080a013d 	.word	0x080a013d

080a01fc <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a01fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a0200:	f990 3020 	ldrsb.w	r3, [r0, #32]
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a0204:	4605      	mov	r5, r0
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a0206:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a0208:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a020a:	d106      	bne.n	80a021a <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a020c:	f7ff ffd6 	bl	80a01bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0210:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 80a0212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a0216:	f000 bd92 	b.w	80a0d3e <_ZN8SPIClass8transferEh>
 80a021a:	2607      	movs	r6, #7
 80a021c:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
 80a021e:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
 80a0222:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80a0226:	2100      	movs	r1, #0
 80a0228:	b280      	uxth	r0, r0
 80a022a:	f001 f84f 	bl	80a12cc <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 80a022e:	f995 001e 	ldrsb.w	r0, [r5, #30]
 80a0232:	fa08 f106 	lsl.w	r1, r8, r6
 80a0236:	4039      	ands	r1, r7
 80a0238:	b280      	uxth	r0, r0
 80a023a:	f001 f847 	bl	80a12cc <digitalWrite>
    digitalWrite(_sck, HIGH);
 80a023e:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80a0242:	2101      	movs	r1, #1
 80a0244:	b280      	uxth	r0, r0
 80a0246:	f001 f841 	bl	80a12cc <digitalWrite>
    if (digitalRead(_miso))
 80a024a:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a024e:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 80a0250:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a0252:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 80a0254:	f001 f853 	bl	80a12fe <digitalRead>
 80a0258:	b108      	cbz	r0, 80a025e <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 80a025a:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 80a025e:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80a0262:	d2de      	bcs.n	80a0222 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 80a0264:	4620      	mov	r0, r4
 80a0266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a026c <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 80a026c:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
 80a026e:	f7ff ffa5 	bl	80a01bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0272:	2101      	movs	r1, #1
 80a0274:	f000 fcfc 	bl	80a0c70 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 80a0278:	f7ff ffa0 	bl	80a01bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a027c:	4905      	ldr	r1, [pc, #20]	; (80a0294 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 80a027e:	2201      	movs	r2, #1
 80a0280:	f000 fd2c 	bl	80a0cdc <_ZN8SPIClass13setClockSpeedEjj>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 80a0284:	f7ff ff9a 	bl	80a01bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 80a0288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a028c:	2100      	movs	r1, #0
 80a028e:	f000 bcff 	b.w	80a0c90 <_ZN8SPIClass11setDataModeEh>
 80a0292:	bf00      	nop
 80a0294:	0007a120 	.word	0x0007a120

080a0298 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a0298:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 80a029a:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a029e:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
 80a02a0:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a02a2:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
 80a02a4:	d11c      	bne.n	80a02e0 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x48>
    Wire.beginTransmission(_i2caddr);
 80a02a6:	f001 f857 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a02aa:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a02ae:	f000 fb8e 	bl	80a09ce <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a02b2:	f001 f851 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a02b6:	6803      	ldr	r3, [r0, #0]
 80a02b8:	4629      	mov	r1, r5
 80a02ba:	689b      	ldr	r3, [r3, #8]
 80a02bc:	4798      	blx	r3
    Wire.endTransmission();
 80a02be:	f001 f84b 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a02c2:	f000 fb8b 	bl	80a09dc <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
 80a02c6:	f001 f847 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a02ca:	2201      	movs	r2, #1
 80a02cc:	7f21      	ldrb	r1, [r4, #28]
 80a02ce:	f000 fb77 	bl	80a09c0 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 80a02d2:	f001 f841 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a02d6:	6803      	ldr	r3, [r0, #0]
 80a02d8:	695b      	ldr	r3, [r3, #20]
 80a02da:	4798      	blx	r3
 80a02dc:	b2c5      	uxtb	r5, r0
 80a02de:	e01b      	b.n	80a0318 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x80>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 80a02e0:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a02e4:	3301      	adds	r3, #1
 80a02e6:	d101      	bne.n	80a02ec <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x54>
	  beginTransaction();
 80a02e8:	f7ff ffc0 	bl	80a026c <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
 80a02ec:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a02f0:	2100      	movs	r1, #0
 80a02f2:	b280      	uxth	r0, r0
 80a02f4:	f000 ffea 	bl	80a12cc <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 80a02f8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a02fc:	4620      	mov	r0, r4
 80a02fe:	f7ff ff7d 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 80a0302:	2100      	movs	r1, #0
 80a0304:	4620      	mov	r0, r4
 80a0306:	f7ff ff79 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
 80a030a:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 80a030c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0310:	2101      	movs	r1, #1
 80a0312:	b280      	uxth	r0, r0
 80a0314:	f000 ffda 	bl	80a12cc <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
 80a0318:	4628      	mov	r0, r5
 80a031a:	bd38      	pop	{r3, r4, r5, pc}

080a031c <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
 80a031c:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 80a031e:	2123      	movs	r1, #35	; 0x23
 80a0320:	f7ff ffba 	bl	80a0298 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 80a0324:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80a0328:	bd08      	pop	{r3, pc}

080a032a <_ZN15Adafruit_LIS3DH4readEv>:

  return true;
}


void Adafruit_LIS3DH::read(void) {
 80a032a:	b538      	push	{r3, r4, r5, lr}
  // read x y z at once

  if (_cs == -1) {
 80a032c:	f990 301d 	ldrsb.w	r3, [r0, #29]

  return true;
}


void Adafruit_LIS3DH::read(void) {
 80a0330:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
 80a0332:	3301      	adds	r3, #1
 80a0334:	d142      	bne.n	80a03bc <_ZN15Adafruit_LIS3DH4readEv+0x92>
    // i2c
    Wire.beginTransmission(_i2caddr);
 80a0336:	f001 f80f 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a033a:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a033e:	f000 fb46 	bl	80a09ce <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 80a0342:	f001 f809 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a0346:	21a8      	movs	r1, #168	; 0xa8
 80a0348:	f7ff ff23 	bl	80a0192 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 80a034c:	f001 f804 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a0350:	f000 fb44 	bl	80a09dc <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
 80a0354:	f001 f800 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a0358:	2206      	movs	r2, #6
 80a035a:	7f21      	ldrb	r1, [r4, #28]
 80a035c:	f000 fb30 	bl	80a09c0 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 80a0360:	f000 fffa 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a0364:	6803      	ldr	r3, [r0, #0]
 80a0366:	695b      	ldr	r3, [r3, #20]
 80a0368:	4798      	blx	r3
 80a036a:	80e0      	strh	r0, [r4, #6]
 80a036c:	f000 fff4 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a0370:	6803      	ldr	r3, [r0, #0]
 80a0372:	695b      	ldr	r3, [r3, #20]
 80a0374:	4798      	blx	r3
 80a0376:	88e3      	ldrh	r3, [r4, #6]
 80a0378:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a037c:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 80a037e:	f000 ffeb 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a0382:	6803      	ldr	r3, [r0, #0]
 80a0384:	695b      	ldr	r3, [r3, #20]
 80a0386:	4798      	blx	r3
 80a0388:	8120      	strh	r0, [r4, #8]
 80a038a:	f000 ffe5 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a038e:	6803      	ldr	r3, [r0, #0]
 80a0390:	695b      	ldr	r3, [r3, #20]
 80a0392:	4798      	blx	r3
 80a0394:	8923      	ldrh	r3, [r4, #8]
 80a0396:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a039a:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 80a039c:	f000 ffdc 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a03a0:	6803      	ldr	r3, [r0, #0]
 80a03a2:	695b      	ldr	r3, [r3, #20]
 80a03a4:	4798      	blx	r3
 80a03a6:	8160      	strh	r0, [r4, #10]
 80a03a8:	f000 ffd6 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a03ac:	6803      	ldr	r3, [r0, #0]
 80a03ae:	695b      	ldr	r3, [r3, #20]
 80a03b0:	4798      	blx	r3
 80a03b2:	8963      	ldrh	r3, [r4, #10]
 80a03b4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a03b8:	8160      	strh	r0, [r4, #10]
 80a03ba:	e03c      	b.n	80a0436 <_ZN15Adafruit_LIS3DH4readEv+0x10c>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
 80a03bc:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a03c0:	3301      	adds	r3, #1
 80a03c2:	d101      	bne.n	80a03c8 <_ZN15Adafruit_LIS3DH4readEv+0x9e>
      beginTransaction();
 80a03c4:	f7ff ff52 	bl	80a026c <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 80a03c8:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a03cc:	2100      	movs	r1, #0
 80a03ce:	b280      	uxth	r0, r0
 80a03d0:	f000 ff7c 	bl	80a12cc <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 80a03d4:	21e8      	movs	r1, #232	; 0xe8
 80a03d6:	4620      	mov	r0, r4
 80a03d8:	f7ff ff10 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80a03dc:	21ff      	movs	r1, #255	; 0xff
 80a03de:	4620      	mov	r0, r4
 80a03e0:	f7ff ff0c 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
 80a03e4:	21ff      	movs	r1, #255	; 0xff
 80a03e6:	80e0      	strh	r0, [r4, #6]
 80a03e8:	4620      	mov	r0, r4
 80a03ea:	f7ff ff07 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
 80a03ee:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a03f0:	21ff      	movs	r1, #255	; 0xff
      beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80a03f2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a03f6:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a03f8:	4620      	mov	r0, r4
 80a03fa:	f7ff feff 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
 80a03fe:	21ff      	movs	r1, #255	; 0xff
 80a0400:	8120      	strh	r0, [r4, #8]
 80a0402:	4620      	mov	r0, r4
 80a0404:	f7ff fefa 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
 80a0408:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a040a:	21ff      	movs	r1, #255	; 0xff

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a040c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0410:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a0412:	4620      	mov	r0, r4
 80a0414:	f7ff fef2 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
 80a0418:	21ff      	movs	r1, #255	; 0xff
 80a041a:	8160      	strh	r0, [r4, #10]
 80a041c:	4620      	mov	r0, r4
 80a041e:	f7ff feed 	bl	80a01fc <_ZN15Adafruit_LIS3DH7spixferEh>
 80a0422:	8963      	ldrh	r3, [r4, #10]

    digitalWrite(_cs, HIGH);
 80a0424:	2101      	movs	r1, #1
    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a0426:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a042a:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
 80a042c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0430:	b280      	uxth	r0, r0
 80a0432:	f000 ff4b 	bl	80a12cc <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
 80a0436:	4620      	mov	r0, r4
 80a0438:	f7ff ff70 	bl	80a031c <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80a043c:	2803      	cmp	r0, #3
 80a043e:	d009      	beq.n	80a0454 <_ZN15Adafruit_LIS3DH4readEv+0x12a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80a0440:	2802      	cmp	r0, #2
 80a0442:	d00a      	beq.n	80a045a <_ZN15Adafruit_LIS3DH4readEv+0x130>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80a0444:	2801      	cmp	r0, #1
 80a0446:	d00b      	beq.n	80a0460 <_ZN15Adafruit_LIS3DH4readEv+0x136>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 80a0448:	2800      	cmp	r0, #0
 80a044a:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80a044e:	bf18      	it	ne
 80a0450:	2001      	movne	r0, #1
 80a0452:	e007      	b.n	80a0464 <_ZN15Adafruit_LIS3DH4readEv+0x13a>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80a0454:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80a0458:	e004      	b.n	80a0464 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80a045a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80a045e:	e001      	b.n	80a0464 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80a0460:	f641 70fe 	movw	r0, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
 80a0464:	f001 f9da 	bl	80a181c <__aeabi_i2f>
 80a0468:	4605      	mov	r5, r0
 80a046a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80a046e:	f001 f9d5 	bl	80a181c <__aeabi_i2f>
 80a0472:	4629      	mov	r1, r5
 80a0474:	f001 fada 	bl	80a1a2c <__aeabi_fdiv>
 80a0478:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 80a047a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80a047e:	f001 f9cd 	bl	80a181c <__aeabi_i2f>
 80a0482:	4629      	mov	r1, r5
 80a0484:	f001 fad2 	bl	80a1a2c <__aeabi_fdiv>
 80a0488:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 80a048a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80a048e:	f001 f9c5 	bl	80a181c <__aeabi_i2f>
 80a0492:	4629      	mov	r1, r5
 80a0494:	f001 faca 	bl	80a1a2c <__aeabi_fdiv>
 80a0498:	6160      	str	r0, [r4, #20]
 80a049a:	bd38      	pop	{r3, r4, r5, pc}

080a049c <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 80a049c:	b570      	push	{r4, r5, r6, lr}
 80a049e:	460c      	mov	r4, r1
 80a04a0:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 80a04a2:	2624      	movs	r6, #36	; 0x24
 80a04a4:	4632      	mov	r2, r6
 80a04a6:	2100      	movs	r1, #0
 80a04a8:	4620      	mov	r0, r4
 80a04aa:	f001 fb74 	bl	80a1b96 <memset>

  event->version   = sizeof(sensors_event_t);
 80a04ae:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
 80a04b0:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = 0;

  read();
 80a04b2:	4628      	mov	r0, r5
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
 80a04b4:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80a04b6:	2301      	movs	r3, #1
 80a04b8:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
 80a04ba:	2300      	movs	r3, #0
 80a04bc:	6123      	str	r3, [r4, #16]

  read();
 80a04be:	f7ff ff34 	bl	80a032a <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
 80a04c2:	68eb      	ldr	r3, [r5, #12]
 80a04c4:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80a04c6:	692b      	ldr	r3, [r5, #16]
 80a04c8:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80a04ca:	696b      	ldr	r3, [r5, #20]
 80a04cc:	61e3      	str	r3, [r4, #28]
}
 80a04ce:	bd70      	pop	{r4, r5, r6, pc}

080a04d0 <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
 80a04d0:	f000 b862 	b.w	80a0598 <HAL_Pin_Map>

080a04d4 <_GLOBAL__sub_I_gps>:
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 80a04d4:	b510      	push	{r4, lr}
 80a04d6:	f000 f85f 	bl	80a0598 <HAL_Pin_Map>
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 80a04da:	f000 fcc9 	bl	80a0e70 <_Z22__fetch_global_Serial1v>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80a04de:	4c08      	ldr	r4, [pc, #32]	; (80a0500 <_GLOBAL__sub_I_gps+0x2c>)
#include "AssetTracker.h"
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 80a04e0:	4601      	mov	r1, r0
 80a04e2:	4808      	ldr	r0, [pc, #32]	; (80a0504 <_GLOBAL__sub_I_gps+0x30>)
 80a04e4:	f7ff fe20 	bl	80a0128 <_ZN12Adafruit_GPSC1EP11USARTSerial>
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80a04e8:	210c      	movs	r1, #12
 80a04ea:	4620      	mov	r0, r4
 80a04ec:	f7ff fe56 	bl	80a019c <_ZN15Adafruit_LIS3DHC1Ea>
 80a04f0:	4620      	mov	r0, r4
	return accel.setupLowPowerWakeMode(movementThreshold);
}

uint8_t AssetTracker::clearAccelInterrupt() {
	return accel.clearInterrupt();
}
 80a04f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "math.h"

//----------------- Tracker ----------------//

Adafruit_GPS gps = Adafruit_GPS(&Serial1);
Adafruit_LIS3DH accel = Adafruit_LIS3DH(A2);
 80a04f6:	4a04      	ldr	r2, [pc, #16]	; (80a0508 <_GLOBAL__sub_I_gps+0x34>)
 80a04f8:	4904      	ldr	r1, [pc, #16]	; (80a050c <_GLOBAL__sub_I_gps+0x38>)
 80a04fa:	f000 bf6b 	b.w	80a13d4 <__aeabi_atexit>
 80a04fe:	bf00      	nop
 80a0500:	20000178 	.word	0x20000178
 80a0504:	200001a4 	.word	0x200001a4
 80a0508:	20000068 	.word	0x20000068
 80a050c:	080a013b 	.word	0x080a013b

080a0510 <_GLOBAL__sub_I_CellularHelper.cpp>:
 80a0510:	f000 b842 	b.w	80a0598 <HAL_Pin_Map>

080a0514 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0514:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0516:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0518:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a051a:	b113      	cbz	r3, 80a0522 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a051c:	2203      	movs	r2, #3
 80a051e:	4601      	mov	r1, r0
 80a0520:	4798      	blx	r3
    }
 80a0522:	4620      	mov	r0, r4
 80a0524:	bd10      	pop	{r4, pc}
	...

080a0528 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0528:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 80a052a:	2201      	movs	r2, #1
 80a052c:	701a      	strb	r2, [r3, #0]
 80a052e:	f000 b833 	b.w	80a0598 <HAL_Pin_Map>
 80a0532:	bf00      	nop
 80a0534:	200001f4 	.word	0x200001f4

080a0538 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <os_mutex_recursive_create+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601d0 	.word	0x080601d0

080a0548 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <os_mutex_recursive_destroy+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601d0 	.word	0x080601d0

080a0558 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <os_mutex_recursive_lock+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601d0 	.word	0x080601d0

080a0568 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <os_mutex_recursive_unlock+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601d0 	.word	0x080601d0

080a0578 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <HAL_RNG_GetRandomNumber+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	685b      	ldr	r3, [r3, #4]
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	0806019c 	.word	0x0806019c

080a0588 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	695b      	ldr	r3, [r3, #20]
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	0806019c 	.word	0x0806019c

080a0598 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <HAL_Pin_Map+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	681b      	ldr	r3, [r3, #0]
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	080601b0 	.word	0x080601b0

080a05a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b02      	ldr	r3, [pc, #8]	; (80a05b4 <HAL_Get_Pin_Mode+0xc>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	68db      	ldr	r3, [r3, #12]
 80a05b0:	9301      	str	r3, [sp, #4]
 80a05b2:	bd08      	pop	{r3, pc}
 80a05b4:	080601b0 	.word	0x080601b0

080a05b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a05b8:	b508      	push	{r3, lr}
 80a05ba:	4b02      	ldr	r3, [pc, #8]	; (80a05c4 <HAL_GPIO_Write+0xc>)
 80a05bc:	681b      	ldr	r3, [r3, #0]
 80a05be:	691b      	ldr	r3, [r3, #16]
 80a05c0:	9301      	str	r3, [sp, #4]
 80a05c2:	bd08      	pop	{r3, pc}
 80a05c4:	080601b0 	.word	0x080601b0

080a05c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a05c8:	b508      	push	{r3, lr}
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <HAL_GPIO_Read+0xc>)
 80a05cc:	681b      	ldr	r3, [r3, #0]
 80a05ce:	695b      	ldr	r3, [r3, #20]
 80a05d0:	9301      	str	r3, [sp, #4]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	080601b0 	.word	0x080601b0

080a05d8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <HAL_I2C_Begin_Transmission+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601ac 	.word	0x080601ac

080a05e8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <HAL_I2C_End_Transmission+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601ac 	.word	0x080601ac

080a05f8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <HAL_I2C_Write_Data+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601ac 	.word	0x080601ac

080a0608 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <HAL_I2C_Available_Data+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601ac 	.word	0x080601ac

080a0618 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <HAL_I2C_Read_Data+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601ac 	.word	0x080601ac

080a0628 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <HAL_I2C_Peek_Data+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601ac 	.word	0x080601ac

080a0638 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b02      	ldr	r3, [pc, #8]	; (80a0644 <HAL_I2C_Flush_Data+0xc>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0640:	9301      	str	r3, [sp, #4]
 80a0642:	bd08      	pop	{r3, pc}
 80a0644:	080601ac 	.word	0x080601ac

080a0648 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0648:	b508      	push	{r3, lr}
 80a064a:	4b02      	ldr	r3, [pc, #8]	; (80a0654 <HAL_I2C_Is_Enabled+0xc>)
 80a064c:	681b      	ldr	r3, [r3, #0]
 80a064e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0650:	9301      	str	r3, [sp, #4]
 80a0652:	bd08      	pop	{r3, pc}
 80a0654:	080601ac 	.word	0x080601ac

080a0658 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b03      	ldr	r3, [pc, #12]	; (80a0668 <HAL_I2C_Init+0x10>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0662:	9301      	str	r3, [sp, #4]
 80a0664:	bd08      	pop	{r3, pc}
 80a0666:	0000      	.short	0x0000
 80a0668:	080601ac 	.word	0x080601ac

080a066c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b03      	ldr	r3, [pc, #12]	; (80a067c <HAL_I2C_Request_Data_Ex+0x10>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0676:	9301      	str	r3, [sp, #4]
 80a0678:	bd08      	pop	{r3, pc}
 80a067a:	0000      	.short	0x0000
 80a067c:	080601ac 	.word	0x080601ac

080a0680 <HAL_SPI_Set_Bit_Order>:

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <HAL_SPI_Set_Bit_Order+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	689b      	ldr	r3, [r3, #8]
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	080601b4 	.word	0x080601b4

080a0690 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <HAL_SPI_Set_Data_Mode+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	68db      	ldr	r3, [r3, #12]
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601b4 	.word	0x080601b4

080a06a0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <HAL_SPI_Set_Clock_Divider+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	691b      	ldr	r3, [r3, #16]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601b4 	.word	0x080601b4

080a06b0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <HAL_SPI_Send_Receive_Data+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	695b      	ldr	r3, [r3, #20]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601b4 	.word	0x080601b4

080a06c0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <HAL_SPI_Init+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	69db      	ldr	r3, [r3, #28]
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601b4 	.word	0x080601b4

080a06d0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <HAL_SPI_Is_Enabled+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6a1b      	ldr	r3, [r3, #32]
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601b4 	.word	0x080601b4

080a06e0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <HAL_SPI_Info+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601b4 	.word	0x080601b4

080a06f0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <HAL_USART_Init+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	699b      	ldr	r3, [r3, #24]
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601c4 	.word	0x080601c4

080a0700 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <HAL_USART_Write_Data+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601c4 	.word	0x080601c4

080a0710 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <HAL_USART_Available_Data+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601c4 	.word	0x080601c4

080a0720 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <HAL_USART_Read_Data+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601c4 	.word	0x080601c4

080a0730 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <HAL_USART_Peek_Data+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601c4 	.word	0x080601c4

080a0740 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <HAL_USART_Flush_Data+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601c4 	.word	0x080601c4

080a0750 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <HAL_USART_Is_Enabled+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601c4 	.word	0x080601c4

080a0760 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601c4 	.word	0x080601c4

080a0770 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <HAL_USB_USART_Init+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	681b      	ldr	r3, [r3, #0]
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601d8 	.word	0x080601d8

080a0780 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <HAL_USB_USART_Available_Data+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	691b      	ldr	r3, [r3, #16]
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601d8 	.word	0x080601d8

080a0790 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	695b      	ldr	r3, [r3, #20]
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601d8 	.word	0x080601d8

080a07a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <HAL_USB_USART_Receive_Data+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	699b      	ldr	r3, [r3, #24]
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601d8 	.word	0x080601d8

080a07b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <HAL_USB_USART_Send_Data+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	69db      	ldr	r3, [r3, #28]
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601d8 	.word	0x080601d8

080a07c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <HAL_USB_USART_Flush_Data+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	6a1b      	ldr	r3, [r3, #32]
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601d8 	.word	0x080601d8

080a07d0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <inet_gethostbyname+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601c0 	.word	0x080601c0

080a07e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <set_system_mode+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	685b      	ldr	r3, [r3, #4]
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601a4 	.word	0x080601a4

080a07f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b03      	ldr	r3, [pc, #12]	; (80a0800 <system_ctrl_set_app_request_handler+0x10>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a07fa:	9301      	str	r3, [sp, #4]
 80a07fc:	bd08      	pop	{r3, pc}
 80a07fe:	0000      	.short	0x0000
 80a0800:	080601a4 	.word	0x080601a4

080a0804 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b03      	ldr	r3, [pc, #12]	; (80a0814 <system_ctrl_set_result+0x10>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a080e:	9301      	str	r3, [sp, #4]
 80a0810:	bd08      	pop	{r3, pc}
 80a0812:	0000      	.short	0x0000
 80a0814:	080601a4 	.word	0x080601a4

080a0818 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601cc 	.word	0x080601cc

080a0828 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <network_connect+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	685b      	ldr	r3, [r3, #4]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601c8 	.word	0x080601c8

080a0838 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <network_connecting+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	689b      	ldr	r3, [r3, #8]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601c8 	.word	0x080601c8

080a0848 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <network_disconnect+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	68db      	ldr	r3, [r3, #12]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601c8 	.word	0x080601c8

080a0858 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <network_ready+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	691b      	ldr	r3, [r3, #16]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601c8 	.word	0x080601c8

080a0868 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <network_on+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	695b      	ldr	r3, [r3, #20]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601c8 	.word	0x080601c8

080a0878 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <network_off+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	699b      	ldr	r3, [r3, #24]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601c8 	.word	0x080601c8

080a0888 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <network_listen+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	69db      	ldr	r3, [r3, #28]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601c8 	.word	0x080601c8

080a0898 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <network_listening+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6a1b      	ldr	r3, [r3, #32]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601c8 	.word	0x080601c8

080a08a8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <network_set_listen_timeout+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601c8 	.word	0x080601c8

080a08b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <network_get_listen_timeout+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601c8 	.word	0x080601c8

080a08c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <malloc+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	681b      	ldr	r3, [r3, #0]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601a0 	.word	0x080601a0

080a08d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <free+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	685b      	ldr	r3, [r3, #4]
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601a0 	.word	0x080601a0

080a08e8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a08e8:	4770      	bx	lr

080a08ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a08ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08ec:	4606      	mov	r6, r0
 80a08ee:	4615      	mov	r5, r2
 80a08f0:	460c      	mov	r4, r1
 80a08f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a08f4:	42bc      	cmp	r4, r7
 80a08f6:	d006      	beq.n	80a0906 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a08f8:	6833      	ldr	r3, [r6, #0]
 80a08fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a08fe:	689b      	ldr	r3, [r3, #8]
 80a0900:	4630      	mov	r0, r6
 80a0902:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0904:	e7f6      	b.n	80a08f4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0906:	4628      	mov	r0, r5
 80a0908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a090a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a090a:	2200      	movs	r2, #0
 80a090c:	7c00      	ldrb	r0, [r0, #16]
 80a090e:	f7ff be73 	b.w	80a05f8 <HAL_I2C_Write_Data>

080a0912 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0912:	2100      	movs	r1, #0
 80a0914:	7c00      	ldrb	r0, [r0, #16]
 80a0916:	f7ff be77 	b.w	80a0608 <HAL_I2C_Available_Data>

080a091a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a091a:	2100      	movs	r1, #0
 80a091c:	7c00      	ldrb	r0, [r0, #16]
 80a091e:	f7ff be7b 	b.w	80a0618 <HAL_I2C_Read_Data>

080a0922 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0922:	2100      	movs	r1, #0
 80a0924:	7c00      	ldrb	r0, [r0, #16]
 80a0926:	f7ff be7f 	b.w	80a0628 <HAL_I2C_Peek_Data>

080a092a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a092a:	2100      	movs	r1, #0
 80a092c:	7c00      	ldrb	r0, [r0, #16]
 80a092e:	f7ff be83 	b.w	80a0638 <HAL_I2C_Flush_Data>

080a0932 <_ZN7TwoWireD0Ev>:
 80a0932:	b510      	push	{r4, lr}
 80a0934:	4604      	mov	r4, r0
 80a0936:	2114      	movs	r1, #20
 80a0938:	f000 fd51 	bl	80a13de <_ZdlPvj>
 80a093c:	4620      	mov	r0, r4
 80a093e:	bd10      	pop	{r4, pc}

080a0940 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0940:	b510      	push	{r4, lr}
 80a0942:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0944:	2300      	movs	r3, #0
 80a0946:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a094c:	60a3      	str	r3, [r4, #8]
 80a094e:	4b04      	ldr	r3, [pc, #16]	; (80a0960 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0950:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0952:	4608      	mov	r0, r1
 80a0954:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0956:	4611      	mov	r1, r2
 80a0958:	f7ff fe7e 	bl	80a0658 <HAL_I2C_Init>
}
 80a095c:	4620      	mov	r0, r4
 80a095e:	bd10      	pop	{r4, pc}
 80a0960:	080a1c70 	.word	0x080a1c70

080a0964 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a0964:	b570      	push	{r4, r5, r6, lr}
 80a0966:	460c      	mov	r4, r1
 80a0968:	4606      	mov	r6, r0
 80a096a:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80a096c:	2514      	movs	r5, #20
 80a096e:	462a      	mov	r2, r5
 80a0970:	2100      	movs	r1, #0
 80a0972:	a801      	add	r0, sp, #4
 80a0974:	f001 f90f 	bl	80a1b96 <memset>
 80a0978:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80a097a:	2200      	movs	r2, #0
 80a097c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0980:	6863      	ldr	r3, [r4, #4]
 80a0982:	a901      	add	r1, sp, #4
 80a0984:	9303      	str	r3, [sp, #12]
 80a0986:	68e3      	ldr	r3, [r4, #12]
 80a0988:	7c30      	ldrb	r0, [r6, #16]
 80a098a:	9304      	str	r3, [sp, #16]
 80a098c:	7a23      	ldrb	r3, [r4, #8]
 80a098e:	f8ad 5004 	strh.w	r5, [sp, #4]
 80a0992:	9305      	str	r3, [sp, #20]
 80a0994:	f7ff fe6a 	bl	80a066c <HAL_I2C_Request_Data_Ex>
}
 80a0998:	b006      	add	sp, #24
 80a099a:	bd70      	pop	{r4, r5, r6, pc}

080a099c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80a099c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a099e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a09a0:	f88d 1000 	strb.w	r1, [sp]
 80a09a4:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a09a8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a09aa:	bf18      	it	ne
 80a09ac:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a09ae:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 80a09b0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a09b2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a09b6:	f7ff ffd5 	bl	80a0964 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a09ba:	b005      	add	sp, #20
 80a09bc:	f85d fb04 	ldr.w	pc, [sp], #4

080a09c0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 80a09c0:	2301      	movs	r3, #1
 80a09c2:	f7ff bfeb 	b.w	80a099c <_ZN7TwoWire11requestFromEhjh>

080a09c6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a09c6:	2200      	movs	r2, #0
 80a09c8:	7c00      	ldrb	r0, [r0, #16]
 80a09ca:	f7ff be05 	b.w	80a05d8 <HAL_I2C_Begin_Transmission>

080a09ce <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a09ce:	b2c9      	uxtb	r1, r1
 80a09d0:	f7ff bff9 	b.w	80a09c6 <_ZN7TwoWire17beginTransmissionEh>

080a09d4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a09d4:	2200      	movs	r2, #0
 80a09d6:	7c00      	ldrb	r0, [r0, #16]
 80a09d8:	f7ff be06 	b.w	80a05e8 <HAL_I2C_End_Transmission>

080a09dc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a09dc:	2101      	movs	r1, #1
 80a09de:	f7ff bff9 	b.w	80a09d4 <_ZN7TwoWire15endTransmissionEh>

080a09e2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a09e2:	2100      	movs	r1, #0
 80a09e4:	7c00      	ldrb	r0, [r0, #16]
 80a09e6:	f7ff be2f 	b.w	80a0648 <HAL_I2C_Is_Enabled>

080a09ea <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a09ea:	4770      	bx	lr

080a09ec <_ZN9IPAddressD0Ev>:
 80a09ec:	b510      	push	{r4, lr}
 80a09ee:	4604      	mov	r4, r0
 80a09f0:	2118      	movs	r1, #24
 80a09f2:	f000 fcf4 	bl	80a13de <_ZdlPvj>
 80a09f6:	4620      	mov	r0, r4
 80a09f8:	bd10      	pop	{r4, pc}

080a09fa <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a09fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09fc:	460f      	mov	r7, r1
 80a09fe:	f100 0608 	add.w	r6, r0, #8
 80a0a02:	1d05      	adds	r5, r0, #4
 80a0a04:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0a06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0a0a:	220a      	movs	r2, #10
 80a0a0c:	4638      	mov	r0, r7
 80a0a0e:	f000 f8ea 	bl	80a0be6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a12:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a14:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a16:	d007      	beq.n	80a0a28 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0a18:	2c00      	cmp	r4, #0
 80a0a1a:	d0f4      	beq.n	80a0a06 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0a1c:	212e      	movs	r1, #46	; 0x2e
 80a0a1e:	4638      	mov	r0, r7
 80a0a20:	f000 f8de 	bl	80a0be0 <_ZN5Print5printEc>
 80a0a24:	4404      	add	r4, r0
 80a0a26:	e7ee      	b.n	80a0a06 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0a28:	4620      	mov	r0, r4
 80a0a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a2c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0a2c:	b510      	push	{r4, lr}
 80a0a2e:	4604      	mov	r4, r0
 80a0a30:	4b04      	ldr	r3, [pc, #16]	; (80a0a44 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0a32:	2211      	movs	r2, #17
 80a0a34:	f840 3b04 	str.w	r3, [r0], #4
 80a0a38:	2100      	movs	r1, #0
 80a0a3a:	f001 f8ac 	bl	80a1b96 <memset>
{
    clear();
}
 80a0a3e:	4620      	mov	r0, r4
 80a0a40:	bd10      	pop	{r4, pc}
 80a0a42:	bf00      	nop
 80a0a44:	080a1c98 	.word	0x080a1c98

080a0a48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0a48:	4603      	mov	r3, r0
 80a0a4a:	4a07      	ldr	r2, [pc, #28]	; (80a0a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0a4c:	b510      	push	{r4, lr}
 80a0a4e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0a52:	f101 0210 	add.w	r2, r1, #16
 80a0a56:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0a5a:	4291      	cmp	r1, r2
 80a0a5c:	f843 4b04 	str.w	r4, [r3], #4
 80a0a60:	d1f9      	bne.n	80a0a56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0a62:	780a      	ldrb	r2, [r1, #0]
 80a0a64:	701a      	strb	r2, [r3, #0]
}
 80a0a66:	bd10      	pop	{r4, pc}
 80a0a68:	080a1c98 	.word	0x080a1c98

080a0a6c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a6c:	4a02      	ldr	r2, [pc, #8]	; (80a0a78 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0a6e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a70:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0a72:	2204      	movs	r2, #4
 80a0a74:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0a76:	4770      	bx	lr
 80a0a78:	080a1c98 	.word	0x080a1c98

080a0a7c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0a7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0a7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0a82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0a86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0a8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0a8e:	2304      	movs	r3, #4
 80a0a90:	6041      	str	r1, [r0, #4]
 80a0a92:	7503      	strb	r3, [r0, #20]
 80a0a94:	bd10      	pop	{r4, pc}
	...

080a0a98 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a9a:	4d04      	ldr	r5, [pc, #16]	; (80a0aac <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0a9c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0a9e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0aa2:	9500      	str	r5, [sp, #0]
 80a0aa4:	f7ff ffea 	bl	80a0a7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0aa8:	b003      	add	sp, #12
 80a0aaa:	bd30      	pop	{r4, r5, pc}
 80a0aac:	080a1c98 	.word	0x080a1c98

080a0ab0 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a0ab0:	6800      	ldr	r0, [r0, #0]
 80a0ab2:	f7ff bd51 	b.w	80a0558 <os_mutex_recursive_lock>
	...

080a0ab8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0ab8:	4a01      	ldr	r2, [pc, #4]	; (80a0ac0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0abc:	601a      	str	r2, [r3, #0]
 80a0abe:	4770      	bx	lr
 80a0ac0:	080a1d1a 	.word	0x080a1d1a
 80a0ac4:	200001f8 	.word	0x200001f8

080a0ac8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0ac8:	2300      	movs	r3, #0
 80a0aca:	461a      	mov	r2, r3
 80a0acc:	6840      	ldr	r0, [r0, #4]
 80a0ace:	f7ff beab 	b.w	80a0828 <network_connect>

080a0ad2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0ad2:	2200      	movs	r2, #0
 80a0ad4:	2102      	movs	r1, #2
 80a0ad6:	6840      	ldr	r0, [r0, #4]
 80a0ad8:	f7ff beb6 	b.w	80a0848 <network_disconnect>

080a0adc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0adc:	2200      	movs	r2, #0
 80a0ade:	4611      	mov	r1, r2
 80a0ae0:	6840      	ldr	r0, [r0, #4]
 80a0ae2:	f7ff bea9 	b.w	80a0838 <network_connecting>

080a0ae6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0ae6:	2200      	movs	r2, #0
 80a0ae8:	4611      	mov	r1, r2
 80a0aea:	6840      	ldr	r0, [r0, #4]
 80a0aec:	f7ff beb4 	b.w	80a0858 <network_ready>

080a0af0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0af0:	2300      	movs	r3, #0
 80a0af2:	461a      	mov	r2, r3
 80a0af4:	4619      	mov	r1, r3
 80a0af6:	6840      	ldr	r0, [r0, #4]
 80a0af8:	f7ff beb6 	b.w	80a0868 <network_on>

080a0afc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0afc:	2300      	movs	r3, #0
 80a0afe:	461a      	mov	r2, r3
 80a0b00:	4619      	mov	r1, r3
 80a0b02:	6840      	ldr	r0, [r0, #4]
 80a0b04:	f7ff beb8 	b.w	80a0878 <network_off>

080a0b08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0b08:	2200      	movs	r2, #0
 80a0b0a:	f081 0101 	eor.w	r1, r1, #1
 80a0b0e:	6840      	ldr	r0, [r0, #4]
 80a0b10:	f7ff beba 	b.w	80a0888 <network_listen>

080a0b14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0b14:	2200      	movs	r2, #0
 80a0b16:	6840      	ldr	r0, [r0, #4]
 80a0b18:	f7ff bec6 	b.w	80a08a8 <network_set_listen_timeout>

080a0b1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0b1c:	2200      	movs	r2, #0
 80a0b1e:	4611      	mov	r1, r2
 80a0b20:	6840      	ldr	r0, [r0, #4]
 80a0b22:	f7ff bec9 	b.w	80a08b8 <network_get_listen_timeout>

080a0b26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0b26:	2200      	movs	r2, #0
 80a0b28:	4611      	mov	r1, r2
 80a0b2a:	6840      	ldr	r0, [r0, #4]
 80a0b2c:	f7ff beb4 	b.w	80a0898 <network_listening>

080a0b30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0b30:	b570      	push	{r4, r5, r6, lr}
 80a0b32:	4616      	mov	r6, r2
 80a0b34:	b08e      	sub	sp, #56	; 0x38
 80a0b36:	4604      	mov	r4, r0
    IPAddress addr;
 80a0b38:	a808      	add	r0, sp, #32
 80a0b3a:	f7ff ff77 	bl	80a0a2c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0b3e:	2211      	movs	r2, #17
 80a0b40:	2100      	movs	r1, #0
 80a0b42:	a803      	add	r0, sp, #12
 80a0b44:	f001 f827 	bl	80a1b96 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0b48:	4630      	mov	r0, r6
 80a0b4a:	f001 f855 	bl	80a1bf8 <strlen>
 80a0b4e:	2500      	movs	r5, #0
 80a0b50:	4b0a      	ldr	r3, [pc, #40]	; (80a0b7c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0b52:	9500      	str	r5, [sp, #0]
 80a0b54:	b281      	uxth	r1, r0
 80a0b56:	685b      	ldr	r3, [r3, #4]
 80a0b58:	aa03      	add	r2, sp, #12
 80a0b5a:	4630      	mov	r0, r6
 80a0b5c:	f7ff fe38 	bl	80a07d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b60:	b120      	cbz	r0, 80a0b6c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0b62:	4629      	mov	r1, r5
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f7ff ff81 	bl	80a0a6c <_ZN9IPAddressC1Em>
 80a0b6a:	e003      	b.n	80a0b74 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0b6c:	a903      	add	r1, sp, #12
 80a0b6e:	4620      	mov	r0, r4
 80a0b70:	f7ff ff6a 	bl	80a0a48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0b74:	4620      	mov	r0, r4
 80a0b76:	b00e      	add	sp, #56	; 0x38
 80a0b78:	bd70      	pop	{r4, r5, r6, pc}
 80a0b7a:	bf00      	nop
 80a0b7c:	20000680 	.word	0x20000680

080a0b80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0b80:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0b82:	4a03      	ldr	r2, [pc, #12]	; (80a0b90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0b84:	601a      	str	r2, [r3, #0]
 80a0b86:	2200      	movs	r2, #0
 80a0b88:	605a      	str	r2, [r3, #4]
 80a0b8a:	4770      	bx	lr
 80a0b8c:	200001fc 	.word	0x200001fc
 80a0b90:	080a1d90 	.word	0x080a1d90

080a0b94 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b96:	4606      	mov	r6, r0
 80a0b98:	460d      	mov	r5, r1
 80a0b9a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0b9c:	2400      	movs	r4, #0
  while (size--) {
 80a0b9e:	42bd      	cmp	r5, r7
 80a0ba0:	d00c      	beq.n	80a0bbc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0ba2:	6833      	ldr	r3, [r6, #0]
 80a0ba4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ba8:	689b      	ldr	r3, [r3, #8]
 80a0baa:	4630      	mov	r0, r6
 80a0bac:	4798      	blx	r3
     if (chunk>=0)
 80a0bae:	2800      	cmp	r0, #0
 80a0bb0:	db01      	blt.n	80a0bb6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0bb2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0bb4:	e7f3      	b.n	80a0b9e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0bb6:	2c00      	cmp	r4, #0
 80a0bb8:	bf08      	it	eq
 80a0bba:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0bbc:	4620      	mov	r0, r4
 80a0bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0bc0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0bc0:	b570      	push	{r4, r5, r6, lr}
 80a0bc2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0bc4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0bc6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0bc8:	b149      	cbz	r1, 80a0bde <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0bca:	f001 f815 	bl	80a1bf8 <strlen>
 80a0bce:	682b      	ldr	r3, [r5, #0]
 80a0bd0:	4602      	mov	r2, r0
 80a0bd2:	4621      	mov	r1, r4
 80a0bd4:	4628      	mov	r0, r5
    }
 80a0bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0bda:	68db      	ldr	r3, [r3, #12]
 80a0bdc:	4718      	bx	r3
    }
 80a0bde:	bd70      	pop	{r4, r5, r6, pc}

080a0be0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0be0:	6803      	ldr	r3, [r0, #0]
 80a0be2:	689b      	ldr	r3, [r3, #8]
 80a0be4:	4718      	bx	r3

080a0be6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0be6:	2a01      	cmp	r2, #1
 80a0be8:	bf98      	it	ls
 80a0bea:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0bec:	b530      	push	{r4, r5, lr}
 80a0bee:	460b      	mov	r3, r1
 80a0bf0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0bf2:	2100      	movs	r1, #0
 80a0bf4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0bf8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0bfc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0c00:	fb05 3312 	mls	r3, r5, r2, r3
 80a0c04:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c06:	2b09      	cmp	r3, #9
 80a0c08:	bf94      	ite	ls
 80a0c0a:	3330      	addls	r3, #48	; 0x30
 80a0c0c:	3337      	addhi	r3, #55	; 0x37
 80a0c0e:	b2db      	uxtb	r3, r3
 80a0c10:	4621      	mov	r1, r4
 80a0c12:	f804 3901 	strb.w	r3, [r4], #-1
 80a0c16:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0c18:	2d00      	cmp	r5, #0
 80a0c1a:	d1ef      	bne.n	80a0bfc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0c1c:	f7ff ffd0 	bl	80a0bc0 <_ZN5Print5writeEPKc>
}
 80a0c20:	b00b      	add	sp, #44	; 0x2c
 80a0c22:	bd30      	pop	{r4, r5, pc}

080a0c24 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0c24:	b510      	push	{r4, lr}
 80a0c26:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c28:	f7ff fc74 	bl	80a0514 <_ZNSt14_Function_baseD1Ev>
 80a0c2c:	4620      	mov	r0, r4
 80a0c2e:	bd10      	pop	{r4, pc}

080a0c30 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c30:	4803      	ldr	r0, [pc, #12]	; (80a0c40 <_GLOBAL__sub_I_RGB+0x10>)
 80a0c32:	2300      	movs	r3, #0
 80a0c34:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0c36:	4a03      	ldr	r2, [pc, #12]	; (80a0c44 <_GLOBAL__sub_I_RGB+0x14>)
 80a0c38:	4903      	ldr	r1, [pc, #12]	; (80a0c48 <_GLOBAL__sub_I_RGB+0x18>)
 80a0c3a:	f000 bbcb 	b.w	80a13d4 <__aeabi_atexit>
 80a0c3e:	bf00      	nop
 80a0c40:	20000204 	.word	0x20000204
 80a0c44:	20000068 	.word	0x20000068
 80a0c48:	080a0c25 	.word	0x080a0c25

080a0c4c <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a0c4c:	6800      	ldr	r0, [r0, #0]
 80a0c4e:	f7ff bc8b 	b.w	80a0568 <os_mutex_recursive_unlock>

080a0c52 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0c52:	b570      	push	{r4, r5, r6, lr}
 80a0c54:	4604      	mov	r4, r0
 80a0c56:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0c58:	2500      	movs	r5, #0
 80a0c5a:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0c5e:	f7ff fc6b 	bl	80a0538 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0c62:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0c64:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0c66:	f7ff fd2b 	bl	80a06c0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0c6a:	6065      	str	r5, [r4, #4]
}
 80a0c6c:	4620      	mov	r0, r4
 80a0c6e:	bd70      	pop	{r4, r5, r6, pc}

080a0c70 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a0c70:	b570      	push	{r4, r5, r6, lr}
 80a0c72:	4605      	mov	r5, r0
 80a0c74:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0c76:	f100 0408 	add.w	r4, r0, #8
 80a0c7a:	4620      	mov	r0, r4
 80a0c7c:	f7ff ff18 	bl	80a0ab0 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a0c80:	7828      	ldrb	r0, [r5, #0]
 80a0c82:	4631      	mov	r1, r6
 80a0c84:	f7ff fcfc 	bl	80a0680 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0c88:	4620      	mov	r0, r4
 80a0c8a:	f7ff ffdf 	bl	80a0c4c <_ZN14RecursiveMutex6unlockEv>
 80a0c8e:	bd70      	pop	{r4, r5, r6, pc}

080a0c90 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80a0c90:	b570      	push	{r4, r5, r6, lr}
 80a0c92:	4605      	mov	r5, r0
 80a0c94:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0c96:	f100 0408 	add.w	r4, r0, #8
 80a0c9a:	4620      	mov	r0, r4
 80a0c9c:	f7ff ff08 	bl	80a0ab0 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 80a0ca0:	7828      	ldrb	r0, [r5, #0]
 80a0ca2:	4631      	mov	r1, r6
 80a0ca4:	f7ff fcf4 	bl	80a0690 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0ca8:	4620      	mov	r0, r4
 80a0caa:	f7ff ffcf 	bl	80a0c4c <_ZN14RecursiveMutex6unlockEv>
 80a0cae:	bd70      	pop	{r4, r5, r6, pc}

080a0cb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a0cb0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a0cb2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a0cb4:	6018      	str	r0, [r3, #0]
 80a0cb6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80a0cb8:	6818      	ldr	r0, [r3, #0]
 80a0cba:	b2e5      	uxtb	r5, r4
 80a0cbc:	4288      	cmp	r0, r1
 80a0cbe:	d906      	bls.n	80a0cce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a0cc0:	3401      	adds	r4, #1
 80a0cc2:	2c08      	cmp	r4, #8
 80a0cc4:	d002      	beq.n	80a0ccc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a0cc6:	0840      	lsrs	r0, r0, #1
 80a0cc8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80a0cca:	e7f5      	b.n	80a0cb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a0ccc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a0cd0:	5d5b      	ldrb	r3, [r3, r5]
 80a0cd2:	7013      	strb	r3, [r2, #0]
 80a0cd4:	bd30      	pop	{r4, r5, pc}
 80a0cd6:	bf00      	nop
 80a0cd8:	080a1dbc 	.word	0x080a1dbc

080a0cdc <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a0cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0ce0:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0ce2:	f100 0608 	add.w	r6, r0, #8
 80a0ce6:	b088      	sub	sp, #32
    unsigned clock = 0;
 80a0ce8:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a0cea:	fb02 f701 	mul.w	r7, r2, r1
 80a0cee:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 80a0cf0:	9402      	str	r4, [sp, #8]
 80a0cf2:	f7ff fedd 	bl	80a0ab0 <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a0cf6:	f895 8000 	ldrb.w	r8, [r5]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80a0cfa:	4621      	mov	r1, r4
 80a0cfc:	2214      	movs	r2, #20
 80a0cfe:	a803      	add	r0, sp, #12
 80a0d00:	f000 ff49 	bl	80a1b96 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a0d04:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80a0d06:	4622      	mov	r2, r4
 80a0d08:	a903      	add	r1, sp, #12
 80a0d0a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80a0d0c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 80a0d10:	f7ff fce6 	bl	80a06e0 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a0d14:	ab02      	add	r3, sp, #8
 80a0d16:	f10d 0207 	add.w	r2, sp, #7
 80a0d1a:	4639      	mov	r1, r7
 80a0d1c:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 80a0d1e:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a0d22:	f7ff ffc5 	bl	80a0cb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 80a0d26:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a0d2a:	7828      	ldrb	r0, [r5, #0]
 80a0d2c:	f7ff fcb8 	bl	80a06a0 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0d30:	4630      	mov	r0, r6
 80a0d32:	f7ff ff8b 	bl	80a0c4c <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 80a0d36:	9802      	ldr	r0, [sp, #8]
 80a0d38:	b008      	add	sp, #32
 80a0d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0d3e <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80a0d3e:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a0d40:	7800      	ldrb	r0, [r0, #0]
 80a0d42:	f7ff fcb5 	bl	80a06b0 <HAL_SPI_Send_Receive_Data>
}
 80a0d46:	b2c0      	uxtb	r0, r0
 80a0d48:	bd08      	pop	{r3, pc}

080a0d4a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0d4a:	7800      	ldrb	r0, [r0, #0]
 80a0d4c:	f7ff bcc0 	b.w	80a06d0 <HAL_SPI_Is_Enabled>

080a0d50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0d50:	b510      	push	{r4, lr}
 80a0d52:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0d54:	6800      	ldr	r0, [r0, #0]
 80a0d56:	b118      	cbz	r0, 80a0d60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0d58:	f7ff fdbe 	bl	80a08d8 <free>
            wakeupSource_ = nullptr;
 80a0d5c:	2300      	movs	r3, #0
 80a0d5e:	6023      	str	r3, [r4, #0]
 80a0d60:	bd10      	pop	{r4, pc}

080a0d62 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0d62:	b510      	push	{r4, lr}
 80a0d64:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0d66:	f7ff fff3 	bl	80a0d50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0d6a:	4620      	mov	r0, r4
 80a0d6c:	bd10      	pop	{r4, pc}
	...

080a0d70 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0d74:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0d76:	4c08      	ldr	r4, [pc, #32]	; (80a0d98 <_GLOBAL__sub_I_System+0x28>)
 80a0d78:	2000      	movs	r0, #0
 80a0d7a:	6020      	str	r0, [r4, #0]
 80a0d7c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0d7e:	71a0      	strb	r0, [r4, #6]
 80a0d80:	8120      	strh	r0, [r4, #8]
 80a0d82:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0d84:	f7ff fd2c 	bl	80a07e0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0d88:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0d8e:	4a03      	ldr	r2, [pc, #12]	; (80a0d9c <_GLOBAL__sub_I_System+0x2c>)
 80a0d90:	4903      	ldr	r1, [pc, #12]	; (80a0da0 <_GLOBAL__sub_I_System+0x30>)
 80a0d92:	f000 bb1f 	b.w	80a13d4 <__aeabi_atexit>
 80a0d96:	bf00      	nop
 80a0d98:	20000214 	.word	0x20000214
 80a0d9c:	20000068 	.word	0x20000068
 80a0da0:	080a0d63 	.word	0x080a0d63

080a0da4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0da4:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0da6:	681a      	ldr	r2, [r3, #0]
 80a0da8:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0daa:	601a      	str	r2, [r3, #0]
 80a0dac:	4770      	bx	lr
 80a0dae:	bf00      	nop
 80a0db0:	20000000 	.word	0x20000000
 80a0db4:	20000220 	.word	0x20000220

080a0db8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0db8:	4770      	bx	lr

080a0dba <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0dba:	7441      	strb	r1, [r0, #17]
 80a0dbc:	4770      	bx	lr

080a0dbe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0dbe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0dc0:	7c00      	ldrb	r0, [r0, #16]
 80a0dc2:	f7ff fccd 	bl	80a0760 <HAL_USART_Available_Data_For_Write>
}
 80a0dc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0dca:	bd08      	pop	{r3, pc}

080a0dcc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0dcc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0dce:	7c00      	ldrb	r0, [r0, #16]
 80a0dd0:	f7ff fc9e 	bl	80a0710 <HAL_USART_Available_Data>
}
 80a0dd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0dd8:	bd08      	pop	{r3, pc}

080a0dda <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0dda:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0ddc:	7c00      	ldrb	r0, [r0, #16]
 80a0dde:	f7ff fca7 	bl	80a0730 <HAL_USART_Peek_Data>
}
 80a0de2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0de6:	bf28      	it	cs
 80a0de8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0dec:	bd08      	pop	{r3, pc}

080a0dee <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0dee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0df0:	7c00      	ldrb	r0, [r0, #16]
 80a0df2:	f7ff fc95 	bl	80a0720 <HAL_USART_Read_Data>
}
 80a0df6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0dfa:	bf28      	it	cs
 80a0dfc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0e00:	bd08      	pop	{r3, pc}

080a0e02 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0e02:	7c00      	ldrb	r0, [r0, #16]
 80a0e04:	f7ff bc9c 	b.w	80a0740 <HAL_USART_Flush_Data>

080a0e08 <_ZN11USARTSerialD0Ev>:
 80a0e08:	b510      	push	{r4, lr}
 80a0e0a:	4604      	mov	r4, r0
 80a0e0c:	2114      	movs	r1, #20
 80a0e0e:	f000 fae6 	bl	80a13de <_ZdlPvj>
 80a0e12:	4620      	mov	r0, r4
 80a0e14:	bd10      	pop	{r4, pc}

080a0e16 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0e16:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0e18:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0e1a:	4604      	mov	r4, r0
 80a0e1c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0e1e:	b925      	cbnz	r5, 80a0e2a <_ZN11USARTSerial5writeEh+0x14>
 80a0e20:	7c00      	ldrb	r0, [r0, #16]
 80a0e22:	f7ff fc9d 	bl	80a0760 <HAL_USART_Available_Data_For_Write>
 80a0e26:	2800      	cmp	r0, #0
 80a0e28:	dd05      	ble.n	80a0e36 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0e2a:	4631      	mov	r1, r6
 80a0e2c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0e32:	f7ff bc65 	b.w	80a0700 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0e36:	4628      	mov	r0, r5
 80a0e38:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0e3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0e3c:	b510      	push	{r4, lr}
 80a0e3e:	4604      	mov	r4, r0
 80a0e40:	4608      	mov	r0, r1
 80a0e42:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0e44:	2200      	movs	r2, #0
 80a0e46:	6062      	str	r2, [r4, #4]
 80a0e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0e4c:	60a2      	str	r2, [r4, #8]
 80a0e4e:	4a05      	ldr	r2, [pc, #20]	; (80a0e64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0e50:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0e52:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0e54:	2201      	movs	r2, #1
 80a0e56:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0e58:	461a      	mov	r2, r3
 80a0e5a:	f7ff fc49 	bl	80a06f0 <HAL_USART_Init>
}
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	bd10      	pop	{r4, pc}
 80a0e62:	bf00      	nop
 80a0e64:	080a1df8 	.word	0x080a1df8

080a0e68 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0e68:	7c00      	ldrb	r0, [r0, #16]
 80a0e6a:	f7ff bc71 	b.w	80a0750 <HAL_USART_Is_Enabled>
	...

080a0e70 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0e70:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0e72:	4d0c      	ldr	r5, [pc, #48]	; (80a0ea4 <_Z22__fetch_global_Serial1v+0x34>)
 80a0e74:	6829      	ldr	r1, [r5, #0]
 80a0e76:	f011 0401 	ands.w	r4, r1, #1
 80a0e7a:	d111      	bne.n	80a0ea0 <_Z22__fetch_global_Serial1v+0x30>
 80a0e7c:	4628      	mov	r0, r5
 80a0e7e:	f7ff f90e 	bl	80a009e <__cxa_guard_acquire>
 80a0e82:	b168      	cbz	r0, 80a0ea0 <_Z22__fetch_global_Serial1v+0x30>
 80a0e84:	4a08      	ldr	r2, [pc, #32]	; (80a0ea8 <_Z22__fetch_global_Serial1v+0x38>)
 80a0e86:	4621      	mov	r1, r4
 80a0e88:	4b08      	ldr	r3, [pc, #32]	; (80a0eac <_Z22__fetch_global_Serial1v+0x3c>)
 80a0e8a:	4809      	ldr	r0, [pc, #36]	; (80a0eb0 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e8c:	f7ff ffd6 	bl	80a0e3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0e90:	4628      	mov	r0, r5
 80a0e92:	f7ff f909 	bl	80a00a8 <__cxa_guard_release>
 80a0e96:	4a07      	ldr	r2, [pc, #28]	; (80a0eb4 <_Z22__fetch_global_Serial1v+0x44>)
 80a0e98:	4907      	ldr	r1, [pc, #28]	; (80a0eb8 <_Z22__fetch_global_Serial1v+0x48>)
 80a0e9a:	4805      	ldr	r0, [pc, #20]	; (80a0eb0 <_Z22__fetch_global_Serial1v+0x40>)
 80a0e9c:	f000 fa9a 	bl	80a13d4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0ea0:	4803      	ldr	r0, [pc, #12]	; (80a0eb0 <_Z22__fetch_global_Serial1v+0x40>)
 80a0ea2:	bd38      	pop	{r3, r4, r5, pc}
 80a0ea4:	200002bc 	.word	0x200002bc
 80a0ea8:	200002c0 	.word	0x200002c0
 80a0eac:	20000238 	.word	0x20000238
 80a0eb0:	20000224 	.word	0x20000224
 80a0eb4:	20000068 	.word	0x20000068
 80a0eb8:	080a0db9 	.word	0x080a0db9

080a0ebc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0ebc:	7441      	strb	r1, [r0, #17]
 80a0ebe:	4770      	bx	lr

080a0ec0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0ec0:	4770      	bx	lr

080a0ec2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0ec2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0ec4:	2100      	movs	r1, #0
 80a0ec6:	7c00      	ldrb	r0, [r0, #16]
 80a0ec8:	f7ff fc6a 	bl	80a07a0 <HAL_USB_USART_Receive_Data>
}
 80a0ecc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ed0:	bf28      	it	cs
 80a0ed2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0ed6:	bd08      	pop	{r3, pc}

080a0ed8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0ed8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0eda:	2101      	movs	r1, #1
 80a0edc:	7c00      	ldrb	r0, [r0, #16]
 80a0ede:	f7ff fc5f 	bl	80a07a0 <HAL_USB_USART_Receive_Data>
}
 80a0ee2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ee6:	bf28      	it	cs
 80a0ee8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0eec:	bd08      	pop	{r3, pc}

080a0eee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0eee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0ef0:	7c00      	ldrb	r0, [r0, #16]
 80a0ef2:	f7ff fc4d 	bl	80a0790 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0ef6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0efa:	bd08      	pop	{r3, pc}

080a0efc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0efc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0efe:	7c00      	ldrb	r0, [r0, #16]
 80a0f00:	f7ff fc3e 	bl	80a0780 <HAL_USB_USART_Available_Data>
}
 80a0f04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f08:	bd08      	pop	{r3, pc}

080a0f0a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0f0a:	7c00      	ldrb	r0, [r0, #16]
 80a0f0c:	f7ff bc58 	b.w	80a07c0 <HAL_USB_USART_Flush_Data>

080a0f10 <_ZN9USBSerialD0Ev>:
 80a0f10:	b510      	push	{r4, lr}
 80a0f12:	4604      	mov	r4, r0
 80a0f14:	2114      	movs	r1, #20
 80a0f16:	f000 fa62 	bl	80a13de <_ZdlPvj>
 80a0f1a:	4620      	mov	r0, r4
 80a0f1c:	bd10      	pop	{r4, pc}

080a0f1e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0f1e:	b538      	push	{r3, r4, r5, lr}
 80a0f20:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f22:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0f24:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f26:	f7ff fc33 	bl	80a0790 <HAL_USB_USART_Available_Data_For_Write>
 80a0f2a:	2800      	cmp	r0, #0
 80a0f2c:	dc01      	bgt.n	80a0f32 <_ZN9USBSerial5writeEh+0x14>
 80a0f2e:	7c60      	ldrb	r0, [r4, #17]
 80a0f30:	b128      	cbz	r0, 80a0f3e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0f32:	4629      	mov	r1, r5
 80a0f34:	7c20      	ldrb	r0, [r4, #16]
 80a0f36:	f7ff fc3b 	bl	80a07b0 <HAL_USB_USART_Send_Data>
 80a0f3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0f3e:	bd38      	pop	{r3, r4, r5, pc}

080a0f40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0f40:	b510      	push	{r4, lr}
 80a0f42:	4604      	mov	r4, r0
 80a0f44:	2300      	movs	r3, #0
 80a0f46:	6063      	str	r3, [r4, #4]
 80a0f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0f4c:	60a3      	str	r3, [r4, #8]
 80a0f4e:	4b05      	ldr	r3, [pc, #20]	; (80a0f64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0f50:	4608      	mov	r0, r1
 80a0f52:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0f54:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0f56:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0f58:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0f5a:	4611      	mov	r1, r2
 80a0f5c:	f7ff fc08 	bl	80a0770 <HAL_USB_USART_Init>
}
 80a0f60:	4620      	mov	r0, r4
 80a0f62:	bd10      	pop	{r4, pc}
 80a0f64:	080a1e28 	.word	0x080a1e28

080a0f68 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0f68:	b510      	push	{r4, lr}
 80a0f6a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0f6c:	2214      	movs	r2, #20
 80a0f6e:	2100      	movs	r1, #0
 80a0f70:	f000 fe11 	bl	80a1b96 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0f74:	4b05      	ldr	r3, [pc, #20]	; (80a0f8c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0f76:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0f78:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0f7a:	4b05      	ldr	r3, [pc, #20]	; (80a0f90 <_Z19acquireSerialBufferv+0x28>)
 80a0f7c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0f7e:	f240 1301 	movw	r3, #257	; 0x101
 80a0f82:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f84:	2381      	movs	r3, #129	; 0x81
 80a0f86:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0f88:	bd10      	pop	{r4, pc}
 80a0f8a:	bf00      	nop
 80a0f8c:	200003c9 	.word	0x200003c9
 80a0f90:	20000348 	.word	0x20000348

080a0f94 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0f94:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0f96:	4d0e      	ldr	r5, [pc, #56]	; (80a0fd0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0f98:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0f9a:	a801      	add	r0, sp, #4
 80a0f9c:	f7ff ffe4 	bl	80a0f68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0fa0:	6829      	ldr	r1, [r5, #0]
 80a0fa2:	f011 0401 	ands.w	r4, r1, #1
 80a0fa6:	d110      	bne.n	80a0fca <_Z16_fetch_usbserialv+0x36>
 80a0fa8:	4628      	mov	r0, r5
 80a0faa:	f7ff f878 	bl	80a009e <__cxa_guard_acquire>
 80a0fae:	b160      	cbz	r0, 80a0fca <_Z16_fetch_usbserialv+0x36>
 80a0fb0:	aa01      	add	r2, sp, #4
 80a0fb2:	4621      	mov	r1, r4
 80a0fb4:	4807      	ldr	r0, [pc, #28]	; (80a0fd4 <_Z16_fetch_usbserialv+0x40>)
 80a0fb6:	f7ff ffc3 	bl	80a0f40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0fba:	4628      	mov	r0, r5
 80a0fbc:	f7ff f874 	bl	80a00a8 <__cxa_guard_release>
 80a0fc0:	4a05      	ldr	r2, [pc, #20]	; (80a0fd8 <_Z16_fetch_usbserialv+0x44>)
 80a0fc2:	4906      	ldr	r1, [pc, #24]	; (80a0fdc <_Z16_fetch_usbserialv+0x48>)
 80a0fc4:	4803      	ldr	r0, [pc, #12]	; (80a0fd4 <_Z16_fetch_usbserialv+0x40>)
 80a0fc6:	f000 fa05 	bl	80a13d4 <__aeabi_atexit>
	return _usbserial;
}
 80a0fca:	4802      	ldr	r0, [pc, #8]	; (80a0fd4 <_Z16_fetch_usbserialv+0x40>)
 80a0fcc:	b007      	add	sp, #28
 80a0fce:	bd30      	pop	{r4, r5, pc}
 80a0fd0:	20000344 	.word	0x20000344
 80a0fd4:	200004cc 	.word	0x200004cc
 80a0fd8:	20000068 	.word	0x20000068
 80a0fdc:	080a0ec1 	.word	0x080a0ec1

080a0fe0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0fe0:	b510      	push	{r4, lr}
 80a0fe2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0fe4:	2214      	movs	r2, #20
 80a0fe6:	2100      	movs	r1, #0
 80a0fe8:	f000 fdd5 	bl	80a1b96 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0fec:	4b05      	ldr	r3, [pc, #20]	; (80a1004 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0fee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0ff0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0ff2:	4b05      	ldr	r3, [pc, #20]	; (80a1008 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0ff4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ff6:	f240 1301 	movw	r3, #257	; 0x101
 80a0ffa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ffc:	2381      	movs	r3, #129	; 0x81
 80a0ffe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1000:	bd10      	pop	{r4, pc}
 80a1002:	bf00      	nop
 80a1004:	2000057c 	.word	0x2000057c
 80a1008:	200004e4 	.word	0x200004e4

080a100c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a100c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a100e:	4c0e      	ldr	r4, [pc, #56]	; (80a1048 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1010:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1012:	a801      	add	r0, sp, #4
 80a1014:	f7ff ffe4 	bl	80a0fe0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1018:	6823      	ldr	r3, [r4, #0]
 80a101a:	07db      	lsls	r3, r3, #31
 80a101c:	d410      	bmi.n	80a1040 <_Z17_fetch_usbserial1v+0x34>
 80a101e:	4620      	mov	r0, r4
 80a1020:	f7ff f83d 	bl	80a009e <__cxa_guard_acquire>
 80a1024:	b160      	cbz	r0, 80a1040 <_Z17_fetch_usbserial1v+0x34>
 80a1026:	aa01      	add	r2, sp, #4
 80a1028:	2101      	movs	r1, #1
 80a102a:	4808      	ldr	r0, [pc, #32]	; (80a104c <_Z17_fetch_usbserial1v+0x40>)
 80a102c:	f7ff ff88 	bl	80a0f40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1030:	4620      	mov	r0, r4
 80a1032:	f7ff f839 	bl	80a00a8 <__cxa_guard_release>
 80a1036:	4a06      	ldr	r2, [pc, #24]	; (80a1050 <_Z17_fetch_usbserial1v+0x44>)
 80a1038:	4906      	ldr	r1, [pc, #24]	; (80a1054 <_Z17_fetch_usbserial1v+0x48>)
 80a103a:	4804      	ldr	r0, [pc, #16]	; (80a104c <_Z17_fetch_usbserial1v+0x40>)
 80a103c:	f000 f9ca 	bl	80a13d4 <__aeabi_atexit>
  return _usbserial1;
}
 80a1040:	4802      	ldr	r0, [pc, #8]	; (80a104c <_Z17_fetch_usbserial1v+0x40>)
 80a1042:	b006      	add	sp, #24
 80a1044:	bd10      	pop	{r4, pc}
 80a1046:	bf00      	nop
 80a1048:	200004e0 	.word	0x200004e0
 80a104c:	20000568 	.word	0x20000568
 80a1050:	20000068 	.word	0x20000068
 80a1054:	080a0ec1 	.word	0x080a0ec1

080a1058 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1058:	2200      	movs	r2, #0
 80a105a:	4611      	mov	r1, r2
 80a105c:	6840      	ldr	r0, [r0, #4]
 80a105e:	f7ff bbfb 	b.w	80a0858 <network_ready>

080a1062 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1062:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1064:	4616      	mov	r6, r2
 80a1066:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1068:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a106a:	460f      	mov	r7, r1
 80a106c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a106e:	2100      	movs	r1, #0
 80a1070:	a803      	add	r0, sp, #12
 80a1072:	f000 fd90 	bl	80a1b96 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1076:	4630      	mov	r0, r6
 80a1078:	f000 fdbe 	bl	80a1bf8 <strlen>
 80a107c:	2500      	movs	r5, #0
 80a107e:	9500      	str	r5, [sp, #0]
 80a1080:	b281      	uxth	r1, r0
 80a1082:	687b      	ldr	r3, [r7, #4]
 80a1084:	aa03      	add	r2, sp, #12
 80a1086:	4630      	mov	r0, r6
 80a1088:	f7ff fba2 	bl	80a07d0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a108c:	b120      	cbz	r0, 80a1098 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a108e:	4629      	mov	r1, r5
 80a1090:	4620      	mov	r0, r4
 80a1092:	f7ff fceb 	bl	80a0a6c <_ZN9IPAddressC1Em>
 80a1096:	e003      	b.n	80a10a0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1098:	a903      	add	r1, sp, #12
 80a109a:	4620      	mov	r0, r4
 80a109c:	f7ff fcd4 	bl	80a0a48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a10a0:	4620      	mov	r0, r4
 80a10a2:	b009      	add	sp, #36	; 0x24
 80a10a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a10a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a10a6:	2200      	movs	r2, #0
 80a10a8:	4611      	mov	r1, r2
 80a10aa:	6840      	ldr	r0, [r0, #4]
 80a10ac:	f7ff bbf4 	b.w	80a0898 <network_listening>

080a10b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a10b0:	2200      	movs	r2, #0
 80a10b2:	4611      	mov	r1, r2
 80a10b4:	6840      	ldr	r0, [r0, #4]
 80a10b6:	f7ff bbff 	b.w	80a08b8 <network_get_listen_timeout>

080a10ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a10ba:	2200      	movs	r2, #0
 80a10bc:	6840      	ldr	r0, [r0, #4]
 80a10be:	f7ff bbf3 	b.w	80a08a8 <network_set_listen_timeout>

080a10c2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a10c2:	2200      	movs	r2, #0
 80a10c4:	f081 0101 	eor.w	r1, r1, #1
 80a10c8:	6840      	ldr	r0, [r0, #4]
 80a10ca:	f7ff bbdd 	b.w	80a0888 <network_listen>

080a10ce <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a10ce:	2300      	movs	r3, #0
 80a10d0:	461a      	mov	r2, r3
 80a10d2:	4619      	mov	r1, r3
 80a10d4:	6840      	ldr	r0, [r0, #4]
 80a10d6:	f7ff bbcf 	b.w	80a0878 <network_off>

080a10da <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a10da:	2300      	movs	r3, #0
 80a10dc:	461a      	mov	r2, r3
 80a10de:	4619      	mov	r1, r3
 80a10e0:	6840      	ldr	r0, [r0, #4]
 80a10e2:	f7ff bbc1 	b.w	80a0868 <network_on>

080a10e6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a10e6:	2200      	movs	r2, #0
 80a10e8:	4611      	mov	r1, r2
 80a10ea:	6840      	ldr	r0, [r0, #4]
 80a10ec:	f7ff bba4 	b.w	80a0838 <network_connecting>

080a10f0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a10f0:	2200      	movs	r2, #0
 80a10f2:	2102      	movs	r1, #2
 80a10f4:	6840      	ldr	r0, [r0, #4]
 80a10f6:	f7ff bba7 	b.w	80a0848 <network_disconnect>

080a10fa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a10fa:	2300      	movs	r3, #0
 80a10fc:	461a      	mov	r2, r3
 80a10fe:	6840      	ldr	r0, [r0, #4]
 80a1100:	f7ff bb92 	b.w	80a0828 <network_connect>

080a1104 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1104:	4b02      	ldr	r3, [pc, #8]	; (80a1110 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1106:	2204      	movs	r2, #4
 80a1108:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a110a:	4a02      	ldr	r2, [pc, #8]	; (80a1114 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a110c:	601a      	str	r2, [r3, #0]
 80a110e:	4770      	bx	lr
 80a1110:	20000680 	.word	0x20000680
 80a1114:	080a1e58 	.word	0x080a1e58

080a1118 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1118:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a111a:	4b14      	ldr	r3, [pc, #80]	; (80a116c <serialEventRun+0x54>)
 80a111c:	b133      	cbz	r3, 80a112c <serialEventRun+0x14>
 80a111e:	f7ff ff39 	bl	80a0f94 <_Z16_fetch_usbserialv>
 80a1122:	6803      	ldr	r3, [r0, #0]
 80a1124:	691b      	ldr	r3, [r3, #16]
 80a1126:	4798      	blx	r3
 80a1128:	2800      	cmp	r0, #0
 80a112a:	dc16      	bgt.n	80a115a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a112c:	4b10      	ldr	r3, [pc, #64]	; (80a1170 <serialEventRun+0x58>)
 80a112e:	b133      	cbz	r3, 80a113e <serialEventRun+0x26>
 80a1130:	f7ff fe9e 	bl	80a0e70 <_Z22__fetch_global_Serial1v>
 80a1134:	6803      	ldr	r3, [r0, #0]
 80a1136:	691b      	ldr	r3, [r3, #16]
 80a1138:	4798      	blx	r3
 80a113a:	2800      	cmp	r0, #0
 80a113c:	dc10      	bgt.n	80a1160 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a113e:	4b0d      	ldr	r3, [pc, #52]	; (80a1174 <serialEventRun+0x5c>)
 80a1140:	b10b      	cbz	r3, 80a1146 <serialEventRun+0x2e>
 80a1142:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1146:	4b0c      	ldr	r3, [pc, #48]	; (80a1178 <serialEventRun+0x60>)
 80a1148:	b17b      	cbz	r3, 80a116a <serialEventRun+0x52>
 80a114a:	f7ff ff5f 	bl	80a100c <_Z17_fetch_usbserial1v>
 80a114e:	6803      	ldr	r3, [r0, #0]
 80a1150:	691b      	ldr	r3, [r3, #16]
 80a1152:	4798      	blx	r3
 80a1154:	2800      	cmp	r0, #0
 80a1156:	dc06      	bgt.n	80a1166 <serialEventRun+0x4e>
 80a1158:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a115a:	f3af 8000 	nop.w
 80a115e:	e7e5      	b.n	80a112c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1160:	f3af 8000 	nop.w
 80a1164:	e7eb      	b.n	80a113e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1166:	f3af 8000 	nop.w
 80a116a:	bd08      	pop	{r3, pc}
	...

080a117c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a117c:	b508      	push	{r3, lr}
	serialEventRun();
 80a117e:	f7ff ffcb 	bl	80a1118 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1182:	f7ff fa01 	bl	80a0588 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1186:	4b01      	ldr	r3, [pc, #4]	; (80a118c <_post_loop+0x10>)
 80a1188:	6018      	str	r0, [r3, #0]
 80a118a:	bd08      	pop	{r3, pc}
 80a118c:	20000690 	.word	0x20000690

080a1190 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1190:	4802      	ldr	r0, [pc, #8]	; (80a119c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1192:	4a03      	ldr	r2, [pc, #12]	; (80a11a0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1194:	4903      	ldr	r1, [pc, #12]	; (80a11a4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1196:	1a12      	subs	r2, r2, r0
 80a1198:	f000 bcf2 	b.w	80a1b80 <memcpy>
 80a119c:	40024000 	.word	0x40024000
 80a11a0:	40024004 	.word	0x40024004
 80a11a4:	080a1f30 	.word	0x080a1f30

080a11a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a11a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a11aa:	2300      	movs	r3, #0
 80a11ac:	9300      	str	r3, [sp, #0]
 80a11ae:	461a      	mov	r2, r3
 80a11b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a11b4:	f7ff fb26 	bl	80a0804 <system_ctrl_set_result>
}
 80a11b8:	b003      	add	sp, #12
 80a11ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a11c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a11c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a11c2:	8843      	ldrh	r3, [r0, #2]
 80a11c4:	2b0a      	cmp	r3, #10
 80a11c6:	d008      	beq.n	80a11da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a11c8:	2b50      	cmp	r3, #80	; 0x50
 80a11ca:	d109      	bne.n	80a11e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a11cc:	4b09      	ldr	r3, [pc, #36]	; (80a11f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a11ce:	681b      	ldr	r3, [r3, #0]
 80a11d0:	b13b      	cbz	r3, 80a11e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a11d2:	b003      	add	sp, #12
 80a11d4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a11d8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a11da:	f7ff ffe5 	bl	80a11a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a11de:	e006      	b.n	80a11ee <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a11e0:	2300      	movs	r3, #0
 80a11e2:	9300      	str	r3, [sp, #0]
 80a11e4:	461a      	mov	r2, r3
 80a11e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a11ea:	f7ff fb0b 	bl	80a0804 <system_ctrl_set_result>
        break;
    }
}
 80a11ee:	b003      	add	sp, #12
 80a11f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a11f4:	20000688 	.word	0x20000688

080a11f8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a11f8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a11fa:	4c10      	ldr	r4, [pc, #64]	; (80a123c <module_user_init_hook+0x44>)
 80a11fc:	4d10      	ldr	r5, [pc, #64]	; (80a1240 <module_user_init_hook+0x48>)
 80a11fe:	6823      	ldr	r3, [r4, #0]
 80a1200:	42ab      	cmp	r3, r5
 80a1202:	4b10      	ldr	r3, [pc, #64]	; (80a1244 <module_user_init_hook+0x4c>)
 80a1204:	bf0c      	ite	eq
 80a1206:	2201      	moveq	r2, #1
 80a1208:	2200      	movne	r2, #0
 80a120a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a120c:	d002      	beq.n	80a1214 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a120e:	f7ff ffbf 	bl	80a1190 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1212:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1214:	f7ff f9b0 	bl	80a0578 <HAL_RNG_GetRandomNumber>
 80a1218:	4604      	mov	r4, r0
    srand(seed);
 80a121a:	f000 fcc5 	bl	80a1ba8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a121e:	4b0a      	ldr	r3, [pc, #40]	; (80a1248 <module_user_init_hook+0x50>)
 80a1220:	b113      	cbz	r3, 80a1228 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1222:	4620      	mov	r0, r4
 80a1224:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1228:	2100      	movs	r1, #0
 80a122a:	4807      	ldr	r0, [pc, #28]	; (80a1248 <module_user_init_hook+0x50>)
 80a122c:	f7ff faf4 	bl	80a0818 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1234:	2100      	movs	r1, #0
 80a1236:	4805      	ldr	r0, [pc, #20]	; (80a124c <module_user_init_hook+0x54>)
 80a1238:	f7ff bada 	b.w	80a07f0 <system_ctrl_set_app_request_handler>
 80a123c:	40024000 	.word	0x40024000
 80a1240:	9a271c1e 	.word	0x9a271c1e
 80a1244:	2000068c 	.word	0x2000068c
 80a1248:	00000000 	.word	0x00000000
 80a124c:	080a11c1 	.word	0x080a11c1

080a1250 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1250:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1252:	4e1a      	ldr	r6, [pc, #104]	; (80a12bc <pinAvailable+0x6c>)
 80a1254:	4604      	mov	r4, r0
 80a1256:	6831      	ldr	r1, [r6, #0]
 80a1258:	f011 0501 	ands.w	r5, r1, #1
 80a125c:	d10f      	bne.n	80a127e <pinAvailable+0x2e>
 80a125e:	4630      	mov	r0, r6
 80a1260:	f7fe ff1d 	bl	80a009e <__cxa_guard_acquire>
 80a1264:	b158      	cbz	r0, 80a127e <pinAvailable+0x2e>
 80a1266:	4629      	mov	r1, r5
 80a1268:	4815      	ldr	r0, [pc, #84]	; (80a12c0 <pinAvailable+0x70>)
 80a126a:	f7ff fcf2 	bl	80a0c52 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a126e:	4630      	mov	r0, r6
 80a1270:	f7fe ff1a 	bl	80a00a8 <__cxa_guard_release>
 80a1274:	4a13      	ldr	r2, [pc, #76]	; (80a12c4 <pinAvailable+0x74>)
 80a1276:	4914      	ldr	r1, [pc, #80]	; (80a12c8 <pinAvailable+0x78>)
 80a1278:	4811      	ldr	r0, [pc, #68]	; (80a12c0 <pinAvailable+0x70>)
 80a127a:	f000 f8ab 	bl	80a13d4 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a127e:	4810      	ldr	r0, [pc, #64]	; (80a12c0 <pinAvailable+0x70>)
 80a1280:	f7ff fd63 	bl	80a0d4a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1284:	b128      	cbz	r0, 80a1292 <pinAvailable+0x42>
 80a1286:	f1a4 030d 	sub.w	r3, r4, #13
 80a128a:	2b02      	cmp	r3, #2
 80a128c:	d801      	bhi.n	80a1292 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a128e:	2000      	movs	r0, #0
 80a1290:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1292:	f000 f861 	bl	80a1358 <_Z19__fetch_global_Wirev>
 80a1296:	f7ff fba4 	bl	80a09e2 <_ZN7TwoWire9isEnabledEv>
 80a129a:	b108      	cbz	r0, 80a12a0 <pinAvailable+0x50>
 80a129c:	2c01      	cmp	r4, #1
 80a129e:	d9f6      	bls.n	80a128e <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a12a0:	f7ff fde6 	bl	80a0e70 <_Z22__fetch_global_Serial1v>
 80a12a4:	f7ff fde0 	bl	80a0e68 <_ZN11USARTSerial9isEnabledEv>
 80a12a8:	b118      	cbz	r0, 80a12b2 <pinAvailable+0x62>
 80a12aa:	f1a4 0312 	sub.w	r3, r4, #18
 80a12ae:	2b01      	cmp	r3, #1
 80a12b0:	d9ed      	bls.n	80a128e <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a12b2:	2c17      	cmp	r4, #23
 80a12b4:	bf8c      	ite	hi
 80a12b6:	2000      	movhi	r0, #0
 80a12b8:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a12ba:	bd70      	pop	{r4, r5, r6, pc}
 80a12bc:	20000168 	.word	0x20000168
 80a12c0:	2000016c 	.word	0x2000016c
 80a12c4:	20000068 	.word	0x20000068
 80a12c8:	080a013d 	.word	0x080a013d

080a12cc <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a12cc:	b538      	push	{r3, r4, r5, lr}
 80a12ce:	4604      	mov	r4, r0
 80a12d0:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a12d2:	f7ff f969 	bl	80a05a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a12d6:	28ff      	cmp	r0, #255	; 0xff
 80a12d8:	d010      	beq.n	80a12fc <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a12da:	2806      	cmp	r0, #6
 80a12dc:	d804      	bhi.n	80a12e8 <digitalWrite+0x1c>
 80a12de:	234d      	movs	r3, #77	; 0x4d
 80a12e0:	fa23 f000 	lsr.w	r0, r3, r0
 80a12e4:	07c3      	lsls	r3, r0, #31
 80a12e6:	d409      	bmi.n	80a12fc <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a12e8:	4620      	mov	r0, r4
 80a12ea:	f7ff ffb1 	bl	80a1250 <pinAvailable>
 80a12ee:	b128      	cbz	r0, 80a12fc <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a12f0:	4629      	mov	r1, r5
 80a12f2:	4620      	mov	r0, r4
}
 80a12f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a12f8:	f7ff b95e 	b.w	80a05b8 <HAL_GPIO_Write>
 80a12fc:	bd38      	pop	{r3, r4, r5, pc}

080a12fe <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a12fe:	b510      	push	{r4, lr}
 80a1300:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1302:	f7ff f951 	bl	80a05a8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1306:	3804      	subs	r0, #4
 80a1308:	b2c0      	uxtb	r0, r0
 80a130a:	2801      	cmp	r0, #1
 80a130c:	d908      	bls.n	80a1320 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a130e:	4620      	mov	r0, r4
 80a1310:	f7ff ff9e 	bl	80a1250 <pinAvailable>
 80a1314:	b120      	cbz	r0, 80a1320 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1316:	4620      	mov	r0, r4
}
 80a1318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a131c:	f7ff b954 	b.w	80a05c8 <HAL_GPIO_Read>
}
 80a1320:	2000      	movs	r0, #0
 80a1322:	bd10      	pop	{r4, pc}

080a1324 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a1324:	b570      	push	{r4, r5, r6, lr}
 80a1326:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1328:	2514      	movs	r5, #20
 80a132a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a132c:	4e09      	ldr	r6, [pc, #36]	; (80a1354 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a132e:	2100      	movs	r1, #0
 80a1330:	f000 fc31 	bl	80a1b96 <memset>
 80a1334:	8025      	strh	r5, [r4, #0]
 80a1336:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1338:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a133a:	60a5      	str	r5, [r4, #8]
 80a133c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a133e:	4628      	mov	r0, r5
 80a1340:	f000 f867 	bl	80a1412 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1344:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1346:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1348:	4628      	mov	r0, r5
 80a134a:	f000 f862 	bl	80a1412 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a134e:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1350:	4620      	mov	r0, r4
 80a1352:	bd70      	pop	{r4, r5, r6, pc}
 80a1354:	080a1e84 	.word	0x080a1e84

080a1358 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1358:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a135a:	4d0e      	ldr	r5, [pc, #56]	; (80a1394 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a135c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a135e:	6829      	ldr	r1, [r5, #0]
 80a1360:	f011 0401 	ands.w	r4, r1, #1
 80a1364:	d113      	bne.n	80a138e <_Z19__fetch_global_Wirev+0x36>
 80a1366:	4628      	mov	r0, r5
 80a1368:	f7fe fe99 	bl	80a009e <__cxa_guard_acquire>
 80a136c:	b178      	cbz	r0, 80a138e <_Z19__fetch_global_Wirev+0x36>
 80a136e:	a801      	add	r0, sp, #4
 80a1370:	f7ff ffd8 	bl	80a1324 <_Z17acquireWireBufferv>
 80a1374:	aa01      	add	r2, sp, #4
 80a1376:	4621      	mov	r1, r4
 80a1378:	4807      	ldr	r0, [pc, #28]	; (80a1398 <_Z19__fetch_global_Wirev+0x40>)
 80a137a:	f7ff fae1 	bl	80a0940 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a137e:	4628      	mov	r0, r5
 80a1380:	f7fe fe92 	bl	80a00a8 <__cxa_guard_release>
 80a1384:	4a05      	ldr	r2, [pc, #20]	; (80a139c <_Z19__fetch_global_Wirev+0x44>)
 80a1386:	4906      	ldr	r1, [pc, #24]	; (80a13a0 <_Z19__fetch_global_Wirev+0x48>)
 80a1388:	4803      	ldr	r0, [pc, #12]	; (80a1398 <_Z19__fetch_global_Wirev+0x40>)
 80a138a:	f000 f823 	bl	80a13d4 <__aeabi_atexit>
	return wire;
}
 80a138e:	4802      	ldr	r0, [pc, #8]	; (80a1398 <_Z19__fetch_global_Wirev+0x40>)
 80a1390:	b007      	add	sp, #28
 80a1392:	bd30      	pop	{r4, r5, pc}
 80a1394:	20000694 	.word	0x20000694
 80a1398:	20000698 	.word	0x20000698
 80a139c:	20000068 	.word	0x20000068
 80a13a0:	080a08e9 	.word	0x080a08e9

080a13a4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a13a4:	b513      	push	{r0, r1, r4, lr}
 80a13a6:	4c08      	ldr	r4, [pc, #32]	; (80a13c8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a13a8:	2300      	movs	r3, #0
 80a13aa:	461a      	mov	r2, r3
 80a13ac:	4619      	mov	r1, r3
 80a13ae:	9300      	str	r3, [sp, #0]
 80a13b0:	4620      	mov	r0, r4
 80a13b2:	f7ff fb71 	bl	80a0a98 <_ZN9IPAddressC1Ehhhh>
 80a13b6:	4620      	mov	r0, r4
 80a13b8:	4a04      	ldr	r2, [pc, #16]	; (80a13cc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a13ba:	4905      	ldr	r1, [pc, #20]	; (80a13d0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a13bc:	b002      	add	sp, #8
 80a13be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a13c2:	f000 b807 	b.w	80a13d4 <__aeabi_atexit>
 80a13c6:	bf00      	nop
 80a13c8:	200006ac 	.word	0x200006ac
 80a13cc:	20000068 	.word	0x20000068
 80a13d0:	080a09eb 	.word	0x080a09eb

080a13d4 <__aeabi_atexit>:
 80a13d4:	460b      	mov	r3, r1
 80a13d6:	4601      	mov	r1, r0
 80a13d8:	4618      	mov	r0, r3
 80a13da:	f000 bbc3 	b.w	80a1b64 <__cxa_atexit>

080a13de <_ZdlPvj>:
 80a13de:	f7fe be5c 	b.w	80a009a <_ZdlPv>
	...

080a13e4 <_ZSt15get_new_handlerv>:
 80a13e4:	4b02      	ldr	r3, [pc, #8]	; (80a13f0 <_ZSt15get_new_handlerv+0xc>)
 80a13e6:	6818      	ldr	r0, [r3, #0]
 80a13e8:	f3bf 8f5f 	dmb	sy
 80a13ec:	4770      	bx	lr
 80a13ee:	bf00      	nop
 80a13f0:	200006c4 	.word	0x200006c4

080a13f4 <_ZnwjRKSt9nothrow_t>:
 80a13f4:	b510      	push	{r4, lr}
 80a13f6:	2800      	cmp	r0, #0
 80a13f8:	bf14      	ite	ne
 80a13fa:	4604      	movne	r4, r0
 80a13fc:	2401      	moveq	r4, #1
 80a13fe:	4620      	mov	r0, r4
 80a1400:	f7ff fa62 	bl	80a08c8 <malloc>
 80a1404:	b920      	cbnz	r0, 80a1410 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1406:	f7ff ffed 	bl	80a13e4 <_ZSt15get_new_handlerv>
 80a140a:	b108      	cbz	r0, 80a1410 <_ZnwjRKSt9nothrow_t+0x1c>
 80a140c:	4780      	blx	r0
 80a140e:	e7f6      	b.n	80a13fe <_ZnwjRKSt9nothrow_t+0xa>
 80a1410:	bd10      	pop	{r4, pc}

080a1412 <_ZnajRKSt9nothrow_t>:
 80a1412:	f7ff bfef 	b.w	80a13f4 <_ZnwjRKSt9nothrow_t>
	...

080a1418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1418:	4b24      	ldr	r3, [pc, #144]	; (80a14ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a141a:	681a      	ldr	r2, [r3, #0]
 80a141c:	07d0      	lsls	r0, r2, #31
 80a141e:	bf5c      	itt	pl
 80a1420:	2201      	movpl	r2, #1
 80a1422:	601a      	strpl	r2, [r3, #0]
 80a1424:	4b22      	ldr	r3, [pc, #136]	; (80a14b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1426:	681a      	ldr	r2, [r3, #0]
 80a1428:	07d1      	lsls	r1, r2, #31
 80a142a:	bf5c      	itt	pl
 80a142c:	2201      	movpl	r2, #1
 80a142e:	601a      	strpl	r2, [r3, #0]
 80a1430:	4b20      	ldr	r3, [pc, #128]	; (80a14b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1432:	681a      	ldr	r2, [r3, #0]
 80a1434:	07d2      	lsls	r2, r2, #31
 80a1436:	bf5c      	itt	pl
 80a1438:	2201      	movpl	r2, #1
 80a143a:	601a      	strpl	r2, [r3, #0]
 80a143c:	4b1e      	ldr	r3, [pc, #120]	; (80a14b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a143e:	681a      	ldr	r2, [r3, #0]
 80a1440:	07d0      	lsls	r0, r2, #31
 80a1442:	bf5c      	itt	pl
 80a1444:	2201      	movpl	r2, #1
 80a1446:	601a      	strpl	r2, [r3, #0]
 80a1448:	4b1c      	ldr	r3, [pc, #112]	; (80a14bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a144a:	681a      	ldr	r2, [r3, #0]
 80a144c:	07d1      	lsls	r1, r2, #31
 80a144e:	bf5c      	itt	pl
 80a1450:	2201      	movpl	r2, #1
 80a1452:	601a      	strpl	r2, [r3, #0]
 80a1454:	4b1a      	ldr	r3, [pc, #104]	; (80a14c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1456:	681a      	ldr	r2, [r3, #0]
 80a1458:	07d2      	lsls	r2, r2, #31
 80a145a:	bf5c      	itt	pl
 80a145c:	2201      	movpl	r2, #1
 80a145e:	601a      	strpl	r2, [r3, #0]
 80a1460:	4b18      	ldr	r3, [pc, #96]	; (80a14c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1462:	681a      	ldr	r2, [r3, #0]
 80a1464:	07d0      	lsls	r0, r2, #31
 80a1466:	bf5c      	itt	pl
 80a1468:	2201      	movpl	r2, #1
 80a146a:	601a      	strpl	r2, [r3, #0]
 80a146c:	4b16      	ldr	r3, [pc, #88]	; (80a14c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a146e:	681a      	ldr	r2, [r3, #0]
 80a1470:	07d1      	lsls	r1, r2, #31
 80a1472:	bf5c      	itt	pl
 80a1474:	2201      	movpl	r2, #1
 80a1476:	601a      	strpl	r2, [r3, #0]
 80a1478:	4b14      	ldr	r3, [pc, #80]	; (80a14cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a147a:	681a      	ldr	r2, [r3, #0]
 80a147c:	07d2      	lsls	r2, r2, #31
 80a147e:	bf5c      	itt	pl
 80a1480:	2201      	movpl	r2, #1
 80a1482:	601a      	strpl	r2, [r3, #0]
 80a1484:	4b12      	ldr	r3, [pc, #72]	; (80a14d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1486:	681a      	ldr	r2, [r3, #0]
 80a1488:	07d0      	lsls	r0, r2, #31
 80a148a:	bf5c      	itt	pl
 80a148c:	2201      	movpl	r2, #1
 80a148e:	601a      	strpl	r2, [r3, #0]
 80a1490:	4b10      	ldr	r3, [pc, #64]	; (80a14d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1492:	681a      	ldr	r2, [r3, #0]
 80a1494:	07d1      	lsls	r1, r2, #31
 80a1496:	bf5c      	itt	pl
 80a1498:	2201      	movpl	r2, #1
 80a149a:	601a      	strpl	r2, [r3, #0]
 80a149c:	4b0e      	ldr	r3, [pc, #56]	; (80a14d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a149e:	681a      	ldr	r2, [r3, #0]
 80a14a0:	07d2      	lsls	r2, r2, #31
 80a14a2:	bf5c      	itt	pl
 80a14a4:	2201      	movpl	r2, #1
 80a14a6:	601a      	strpl	r2, [r3, #0]
 80a14a8:	4770      	bx	lr
 80a14aa:	bf00      	nop
 80a14ac:	200006f4 	.word	0x200006f4
 80a14b0:	200006f0 	.word	0x200006f0
 80a14b4:	200006ec 	.word	0x200006ec
 80a14b8:	200006e8 	.word	0x200006e8
 80a14bc:	200006e4 	.word	0x200006e4
 80a14c0:	200006e0 	.word	0x200006e0
 80a14c4:	200006dc 	.word	0x200006dc
 80a14c8:	200006d8 	.word	0x200006d8
 80a14cc:	200006d4 	.word	0x200006d4
 80a14d0:	200006d0 	.word	0x200006d0
 80a14d4:	200006cc 	.word	0x200006cc
 80a14d8:	200006c8 	.word	0x200006c8

080a14dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a14dc:	4b18      	ldr	r3, [pc, #96]	; (80a1540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a14de:	681a      	ldr	r2, [r3, #0]
 80a14e0:	07d1      	lsls	r1, r2, #31
 80a14e2:	bf5c      	itt	pl
 80a14e4:	2201      	movpl	r2, #1
 80a14e6:	601a      	strpl	r2, [r3, #0]
 80a14e8:	4b16      	ldr	r3, [pc, #88]	; (80a1544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a14ea:	681a      	ldr	r2, [r3, #0]
 80a14ec:	07d2      	lsls	r2, r2, #31
 80a14ee:	bf5c      	itt	pl
 80a14f0:	2201      	movpl	r2, #1
 80a14f2:	601a      	strpl	r2, [r3, #0]
 80a14f4:	4b14      	ldr	r3, [pc, #80]	; (80a1548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a14f6:	681a      	ldr	r2, [r3, #0]
 80a14f8:	07d0      	lsls	r0, r2, #31
 80a14fa:	bf5c      	itt	pl
 80a14fc:	2201      	movpl	r2, #1
 80a14fe:	601a      	strpl	r2, [r3, #0]
 80a1500:	4b12      	ldr	r3, [pc, #72]	; (80a154c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1502:	681a      	ldr	r2, [r3, #0]
 80a1504:	07d1      	lsls	r1, r2, #31
 80a1506:	bf5c      	itt	pl
 80a1508:	2201      	movpl	r2, #1
 80a150a:	601a      	strpl	r2, [r3, #0]
 80a150c:	4b10      	ldr	r3, [pc, #64]	; (80a1550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a150e:	681a      	ldr	r2, [r3, #0]
 80a1510:	07d2      	lsls	r2, r2, #31
 80a1512:	bf5c      	itt	pl
 80a1514:	2201      	movpl	r2, #1
 80a1516:	601a      	strpl	r2, [r3, #0]
 80a1518:	4b0e      	ldr	r3, [pc, #56]	; (80a1554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a151a:	681a      	ldr	r2, [r3, #0]
 80a151c:	07d0      	lsls	r0, r2, #31
 80a151e:	bf5c      	itt	pl
 80a1520:	2201      	movpl	r2, #1
 80a1522:	601a      	strpl	r2, [r3, #0]
 80a1524:	4b0c      	ldr	r3, [pc, #48]	; (80a1558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1526:	681a      	ldr	r2, [r3, #0]
 80a1528:	07d1      	lsls	r1, r2, #31
 80a152a:	bf5c      	itt	pl
 80a152c:	2201      	movpl	r2, #1
 80a152e:	601a      	strpl	r2, [r3, #0]
 80a1530:	4b0a      	ldr	r3, [pc, #40]	; (80a155c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1532:	681a      	ldr	r2, [r3, #0]
 80a1534:	07d2      	lsls	r2, r2, #31
 80a1536:	bf5c      	itt	pl
 80a1538:	2201      	movpl	r2, #1
 80a153a:	601a      	strpl	r2, [r3, #0]
 80a153c:	4770      	bx	lr
 80a153e:	bf00      	nop
 80a1540:	20000714 	.word	0x20000714
 80a1544:	20000710 	.word	0x20000710
 80a1548:	2000070c 	.word	0x2000070c
 80a154c:	20000708 	.word	0x20000708
 80a1550:	20000704 	.word	0x20000704
 80a1554:	20000700 	.word	0x20000700
 80a1558:	200006fc 	.word	0x200006fc
 80a155c:	200006f8 	.word	0x200006f8

080a1560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1560:	4b18      	ldr	r3, [pc, #96]	; (80a15c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1562:	681a      	ldr	r2, [r3, #0]
 80a1564:	07d1      	lsls	r1, r2, #31
 80a1566:	bf5c      	itt	pl
 80a1568:	2201      	movpl	r2, #1
 80a156a:	601a      	strpl	r2, [r3, #0]
 80a156c:	4b16      	ldr	r3, [pc, #88]	; (80a15c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a156e:	681a      	ldr	r2, [r3, #0]
 80a1570:	07d2      	lsls	r2, r2, #31
 80a1572:	bf5c      	itt	pl
 80a1574:	2201      	movpl	r2, #1
 80a1576:	601a      	strpl	r2, [r3, #0]
 80a1578:	4b14      	ldr	r3, [pc, #80]	; (80a15cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a157a:	681a      	ldr	r2, [r3, #0]
 80a157c:	07d0      	lsls	r0, r2, #31
 80a157e:	bf5c      	itt	pl
 80a1580:	2201      	movpl	r2, #1
 80a1582:	601a      	strpl	r2, [r3, #0]
 80a1584:	4b12      	ldr	r3, [pc, #72]	; (80a15d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1586:	681a      	ldr	r2, [r3, #0]
 80a1588:	07d1      	lsls	r1, r2, #31
 80a158a:	bf5c      	itt	pl
 80a158c:	2201      	movpl	r2, #1
 80a158e:	601a      	strpl	r2, [r3, #0]
 80a1590:	4b10      	ldr	r3, [pc, #64]	; (80a15d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1592:	681a      	ldr	r2, [r3, #0]
 80a1594:	07d2      	lsls	r2, r2, #31
 80a1596:	bf5c      	itt	pl
 80a1598:	2201      	movpl	r2, #1
 80a159a:	601a      	strpl	r2, [r3, #0]
 80a159c:	4b0e      	ldr	r3, [pc, #56]	; (80a15d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a159e:	681a      	ldr	r2, [r3, #0]
 80a15a0:	07d0      	lsls	r0, r2, #31
 80a15a2:	bf5c      	itt	pl
 80a15a4:	2201      	movpl	r2, #1
 80a15a6:	601a      	strpl	r2, [r3, #0]
 80a15a8:	4b0c      	ldr	r3, [pc, #48]	; (80a15dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a15aa:	681a      	ldr	r2, [r3, #0]
 80a15ac:	07d1      	lsls	r1, r2, #31
 80a15ae:	bf5c      	itt	pl
 80a15b0:	2201      	movpl	r2, #1
 80a15b2:	601a      	strpl	r2, [r3, #0]
 80a15b4:	4b0a      	ldr	r3, [pc, #40]	; (80a15e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a15b6:	681a      	ldr	r2, [r3, #0]
 80a15b8:	07d2      	lsls	r2, r2, #31
 80a15ba:	bf5c      	itt	pl
 80a15bc:	2201      	movpl	r2, #1
 80a15be:	601a      	strpl	r2, [r3, #0]
 80a15c0:	4770      	bx	lr
 80a15c2:	bf00      	nop
 80a15c4:	20000734 	.word	0x20000734
 80a15c8:	20000730 	.word	0x20000730
 80a15cc:	2000072c 	.word	0x2000072c
 80a15d0:	20000728 	.word	0x20000728
 80a15d4:	20000724 	.word	0x20000724
 80a15d8:	20000720 	.word	0x20000720
 80a15dc:	2000071c 	.word	0x2000071c
 80a15e0:	20000718 	.word	0x20000718

080a15e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a15e4:	4b24      	ldr	r3, [pc, #144]	; (80a1678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a15e6:	681a      	ldr	r2, [r3, #0]
 80a15e8:	07d0      	lsls	r0, r2, #31
 80a15ea:	bf5c      	itt	pl
 80a15ec:	2201      	movpl	r2, #1
 80a15ee:	601a      	strpl	r2, [r3, #0]
 80a15f0:	4b22      	ldr	r3, [pc, #136]	; (80a167c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a15f2:	681a      	ldr	r2, [r3, #0]
 80a15f4:	07d1      	lsls	r1, r2, #31
 80a15f6:	bf5c      	itt	pl
 80a15f8:	2201      	movpl	r2, #1
 80a15fa:	601a      	strpl	r2, [r3, #0]
 80a15fc:	4b20      	ldr	r3, [pc, #128]	; (80a1680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a15fe:	681a      	ldr	r2, [r3, #0]
 80a1600:	07d2      	lsls	r2, r2, #31
 80a1602:	bf5c      	itt	pl
 80a1604:	2201      	movpl	r2, #1
 80a1606:	601a      	strpl	r2, [r3, #0]
 80a1608:	4b1e      	ldr	r3, [pc, #120]	; (80a1684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a160a:	681a      	ldr	r2, [r3, #0]
 80a160c:	07d0      	lsls	r0, r2, #31
 80a160e:	bf5c      	itt	pl
 80a1610:	2201      	movpl	r2, #1
 80a1612:	601a      	strpl	r2, [r3, #0]
 80a1614:	4b1c      	ldr	r3, [pc, #112]	; (80a1688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1616:	681a      	ldr	r2, [r3, #0]
 80a1618:	07d1      	lsls	r1, r2, #31
 80a161a:	bf5c      	itt	pl
 80a161c:	2201      	movpl	r2, #1
 80a161e:	601a      	strpl	r2, [r3, #0]
 80a1620:	4b1a      	ldr	r3, [pc, #104]	; (80a168c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1622:	681a      	ldr	r2, [r3, #0]
 80a1624:	07d2      	lsls	r2, r2, #31
 80a1626:	bf5c      	itt	pl
 80a1628:	2201      	movpl	r2, #1
 80a162a:	601a      	strpl	r2, [r3, #0]
 80a162c:	4b18      	ldr	r3, [pc, #96]	; (80a1690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a162e:	681a      	ldr	r2, [r3, #0]
 80a1630:	07d0      	lsls	r0, r2, #31
 80a1632:	bf5c      	itt	pl
 80a1634:	2201      	movpl	r2, #1
 80a1636:	601a      	strpl	r2, [r3, #0]
 80a1638:	4b16      	ldr	r3, [pc, #88]	; (80a1694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a163a:	681a      	ldr	r2, [r3, #0]
 80a163c:	07d1      	lsls	r1, r2, #31
 80a163e:	bf5c      	itt	pl
 80a1640:	2201      	movpl	r2, #1
 80a1642:	601a      	strpl	r2, [r3, #0]
 80a1644:	4b14      	ldr	r3, [pc, #80]	; (80a1698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1646:	681a      	ldr	r2, [r3, #0]
 80a1648:	07d2      	lsls	r2, r2, #31
 80a164a:	bf5c      	itt	pl
 80a164c:	2201      	movpl	r2, #1
 80a164e:	601a      	strpl	r2, [r3, #0]
 80a1650:	4b12      	ldr	r3, [pc, #72]	; (80a169c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1652:	681a      	ldr	r2, [r3, #0]
 80a1654:	07d0      	lsls	r0, r2, #31
 80a1656:	bf5c      	itt	pl
 80a1658:	2201      	movpl	r2, #1
 80a165a:	601a      	strpl	r2, [r3, #0]
 80a165c:	4b10      	ldr	r3, [pc, #64]	; (80a16a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a165e:	681a      	ldr	r2, [r3, #0]
 80a1660:	07d1      	lsls	r1, r2, #31
 80a1662:	bf5c      	itt	pl
 80a1664:	2201      	movpl	r2, #1
 80a1666:	601a      	strpl	r2, [r3, #0]
 80a1668:	4b0e      	ldr	r3, [pc, #56]	; (80a16a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a166a:	681a      	ldr	r2, [r3, #0]
 80a166c:	07d2      	lsls	r2, r2, #31
 80a166e:	bf5c      	itt	pl
 80a1670:	2201      	movpl	r2, #1
 80a1672:	601a      	strpl	r2, [r3, #0]
 80a1674:	4770      	bx	lr
 80a1676:	bf00      	nop
 80a1678:	20000764 	.word	0x20000764
 80a167c:	20000760 	.word	0x20000760
 80a1680:	2000075c 	.word	0x2000075c
 80a1684:	20000758 	.word	0x20000758
 80a1688:	20000754 	.word	0x20000754
 80a168c:	20000750 	.word	0x20000750
 80a1690:	2000074c 	.word	0x2000074c
 80a1694:	20000748 	.word	0x20000748
 80a1698:	20000744 	.word	0x20000744
 80a169c:	20000740 	.word	0x20000740
 80a16a0:	2000073c 	.word	0x2000073c
 80a16a4:	20000738 	.word	0x20000738

080a16a8 <__aeabi_frsub>:
 80a16a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a16ac:	e002      	b.n	80a16b4 <__addsf3>
 80a16ae:	bf00      	nop

080a16b0 <__aeabi_fsub>:
 80a16b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a16b4 <__addsf3>:
 80a16b4:	0042      	lsls	r2, r0, #1
 80a16b6:	bf1f      	itttt	ne
 80a16b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a16bc:	ea92 0f03 	teqne	r2, r3
 80a16c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a16c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a16c8:	d06a      	beq.n	80a17a0 <__addsf3+0xec>
 80a16ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a16ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a16d2:	bfc1      	itttt	gt
 80a16d4:	18d2      	addgt	r2, r2, r3
 80a16d6:	4041      	eorgt	r1, r0
 80a16d8:	4048      	eorgt	r0, r1
 80a16da:	4041      	eorgt	r1, r0
 80a16dc:	bfb8      	it	lt
 80a16de:	425b      	neglt	r3, r3
 80a16e0:	2b19      	cmp	r3, #25
 80a16e2:	bf88      	it	hi
 80a16e4:	4770      	bxhi	lr
 80a16e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a16ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a16ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a16f2:	bf18      	it	ne
 80a16f4:	4240      	negne	r0, r0
 80a16f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a16fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a16fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1702:	bf18      	it	ne
 80a1704:	4249      	negne	r1, r1
 80a1706:	ea92 0f03 	teq	r2, r3
 80a170a:	d03f      	beq.n	80a178c <__addsf3+0xd8>
 80a170c:	f1a2 0201 	sub.w	r2, r2, #1
 80a1710:	fa41 fc03 	asr.w	ip, r1, r3
 80a1714:	eb10 000c 	adds.w	r0, r0, ip
 80a1718:	f1c3 0320 	rsb	r3, r3, #32
 80a171c:	fa01 f103 	lsl.w	r1, r1, r3
 80a1720:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1724:	d502      	bpl.n	80a172c <__addsf3+0x78>
 80a1726:	4249      	negs	r1, r1
 80a1728:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a172c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1730:	d313      	bcc.n	80a175a <__addsf3+0xa6>
 80a1732:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1736:	d306      	bcc.n	80a1746 <__addsf3+0x92>
 80a1738:	0840      	lsrs	r0, r0, #1
 80a173a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a173e:	f102 0201 	add.w	r2, r2, #1
 80a1742:	2afe      	cmp	r2, #254	; 0xfe
 80a1744:	d251      	bcs.n	80a17ea <__addsf3+0x136>
 80a1746:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a174a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a174e:	bf08      	it	eq
 80a1750:	f020 0001 	biceq.w	r0, r0, #1
 80a1754:	ea40 0003 	orr.w	r0, r0, r3
 80a1758:	4770      	bx	lr
 80a175a:	0049      	lsls	r1, r1, #1
 80a175c:	eb40 0000 	adc.w	r0, r0, r0
 80a1760:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a1764:	f1a2 0201 	sub.w	r2, r2, #1
 80a1768:	d1ed      	bne.n	80a1746 <__addsf3+0x92>
 80a176a:	fab0 fc80 	clz	ip, r0
 80a176e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1772:	ebb2 020c 	subs.w	r2, r2, ip
 80a1776:	fa00 f00c 	lsl.w	r0, r0, ip
 80a177a:	bfaa      	itet	ge
 80a177c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1780:	4252      	neglt	r2, r2
 80a1782:	4318      	orrge	r0, r3
 80a1784:	bfbc      	itt	lt
 80a1786:	40d0      	lsrlt	r0, r2
 80a1788:	4318      	orrlt	r0, r3
 80a178a:	4770      	bx	lr
 80a178c:	f092 0f00 	teq	r2, #0
 80a1790:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1794:	bf06      	itte	eq
 80a1796:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a179a:	3201      	addeq	r2, #1
 80a179c:	3b01      	subne	r3, #1
 80a179e:	e7b5      	b.n	80a170c <__addsf3+0x58>
 80a17a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a17a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a17a8:	bf18      	it	ne
 80a17aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a17ae:	d021      	beq.n	80a17f4 <__addsf3+0x140>
 80a17b0:	ea92 0f03 	teq	r2, r3
 80a17b4:	d004      	beq.n	80a17c0 <__addsf3+0x10c>
 80a17b6:	f092 0f00 	teq	r2, #0
 80a17ba:	bf08      	it	eq
 80a17bc:	4608      	moveq	r0, r1
 80a17be:	4770      	bx	lr
 80a17c0:	ea90 0f01 	teq	r0, r1
 80a17c4:	bf1c      	itt	ne
 80a17c6:	2000      	movne	r0, #0
 80a17c8:	4770      	bxne	lr
 80a17ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a17ce:	d104      	bne.n	80a17da <__addsf3+0x126>
 80a17d0:	0040      	lsls	r0, r0, #1
 80a17d2:	bf28      	it	cs
 80a17d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a17d8:	4770      	bx	lr
 80a17da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a17de:	bf3c      	itt	cc
 80a17e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a17e4:	4770      	bxcc	lr
 80a17e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a17ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a17ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a17f2:	4770      	bx	lr
 80a17f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a17f8:	bf16      	itet	ne
 80a17fa:	4608      	movne	r0, r1
 80a17fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1800:	4601      	movne	r1, r0
 80a1802:	0242      	lsls	r2, r0, #9
 80a1804:	bf06      	itte	eq
 80a1806:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a180a:	ea90 0f01 	teqeq	r0, r1
 80a180e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a1812:	4770      	bx	lr

080a1814 <__aeabi_ui2f>:
 80a1814:	f04f 0300 	mov.w	r3, #0
 80a1818:	e004      	b.n	80a1824 <__aeabi_i2f+0x8>
 80a181a:	bf00      	nop

080a181c <__aeabi_i2f>:
 80a181c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1820:	bf48      	it	mi
 80a1822:	4240      	negmi	r0, r0
 80a1824:	ea5f 0c00 	movs.w	ip, r0
 80a1828:	bf08      	it	eq
 80a182a:	4770      	bxeq	lr
 80a182c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1830:	4601      	mov	r1, r0
 80a1832:	f04f 0000 	mov.w	r0, #0
 80a1836:	e01c      	b.n	80a1872 <__aeabi_l2f+0x2a>

080a1838 <__aeabi_ul2f>:
 80a1838:	ea50 0201 	orrs.w	r2, r0, r1
 80a183c:	bf08      	it	eq
 80a183e:	4770      	bxeq	lr
 80a1840:	f04f 0300 	mov.w	r3, #0
 80a1844:	e00a      	b.n	80a185c <__aeabi_l2f+0x14>
 80a1846:	bf00      	nop

080a1848 <__aeabi_l2f>:
 80a1848:	ea50 0201 	orrs.w	r2, r0, r1
 80a184c:	bf08      	it	eq
 80a184e:	4770      	bxeq	lr
 80a1850:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1854:	d502      	bpl.n	80a185c <__aeabi_l2f+0x14>
 80a1856:	4240      	negs	r0, r0
 80a1858:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a185c:	ea5f 0c01 	movs.w	ip, r1
 80a1860:	bf02      	ittt	eq
 80a1862:	4684      	moveq	ip, r0
 80a1864:	4601      	moveq	r1, r0
 80a1866:	2000      	moveq	r0, #0
 80a1868:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a186c:	bf08      	it	eq
 80a186e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1872:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1876:	fabc f28c 	clz	r2, ip
 80a187a:	3a08      	subs	r2, #8
 80a187c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1880:	db10      	blt.n	80a18a4 <__aeabi_l2f+0x5c>
 80a1882:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1886:	4463      	add	r3, ip
 80a1888:	fa00 fc02 	lsl.w	ip, r0, r2
 80a188c:	f1c2 0220 	rsb	r2, r2, #32
 80a1890:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1894:	fa20 f202 	lsr.w	r2, r0, r2
 80a1898:	eb43 0002 	adc.w	r0, r3, r2
 80a189c:	bf08      	it	eq
 80a189e:	f020 0001 	biceq.w	r0, r0, #1
 80a18a2:	4770      	bx	lr
 80a18a4:	f102 0220 	add.w	r2, r2, #32
 80a18a8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a18ac:	f1c2 0220 	rsb	r2, r2, #32
 80a18b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a18b4:	fa21 f202 	lsr.w	r2, r1, r2
 80a18b8:	eb43 0002 	adc.w	r0, r3, r2
 80a18bc:	bf08      	it	eq
 80a18be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a18c2:	4770      	bx	lr

080a18c4 <__aeabi_fmul>:
 80a18c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a18c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a18cc:	bf1e      	ittt	ne
 80a18ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a18d2:	ea92 0f0c 	teqne	r2, ip
 80a18d6:	ea93 0f0c 	teqne	r3, ip
 80a18da:	d06f      	beq.n	80a19bc <__aeabi_fmul+0xf8>
 80a18dc:	441a      	add	r2, r3
 80a18de:	ea80 0c01 	eor.w	ip, r0, r1
 80a18e2:	0240      	lsls	r0, r0, #9
 80a18e4:	bf18      	it	ne
 80a18e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a18ea:	d01e      	beq.n	80a192a <__aeabi_fmul+0x66>
 80a18ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a18f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a18f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a18f8:	fba0 3101 	umull	r3, r1, r0, r1
 80a18fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1900:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1904:	bf3e      	ittt	cc
 80a1906:	0049      	lslcc	r1, r1, #1
 80a1908:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a190c:	005b      	lslcc	r3, r3, #1
 80a190e:	ea40 0001 	orr.w	r0, r0, r1
 80a1912:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a1916:	2afd      	cmp	r2, #253	; 0xfd
 80a1918:	d81d      	bhi.n	80a1956 <__aeabi_fmul+0x92>
 80a191a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a191e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1922:	bf08      	it	eq
 80a1924:	f020 0001 	biceq.w	r0, r0, #1
 80a1928:	4770      	bx	lr
 80a192a:	f090 0f00 	teq	r0, #0
 80a192e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1932:	bf08      	it	eq
 80a1934:	0249      	lsleq	r1, r1, #9
 80a1936:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a193a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a193e:	3a7f      	subs	r2, #127	; 0x7f
 80a1940:	bfc2      	ittt	gt
 80a1942:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1946:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a194a:	4770      	bxgt	lr
 80a194c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1950:	f04f 0300 	mov.w	r3, #0
 80a1954:	3a01      	subs	r2, #1
 80a1956:	dc5d      	bgt.n	80a1a14 <__aeabi_fmul+0x150>
 80a1958:	f112 0f19 	cmn.w	r2, #25
 80a195c:	bfdc      	itt	le
 80a195e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1962:	4770      	bxle	lr
 80a1964:	f1c2 0200 	rsb	r2, r2, #0
 80a1968:	0041      	lsls	r1, r0, #1
 80a196a:	fa21 f102 	lsr.w	r1, r1, r2
 80a196e:	f1c2 0220 	rsb	r2, r2, #32
 80a1972:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1976:	ea5f 0031 	movs.w	r0, r1, rrx
 80a197a:	f140 0000 	adc.w	r0, r0, #0
 80a197e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a1982:	bf08      	it	eq
 80a1984:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1988:	4770      	bx	lr
 80a198a:	f092 0f00 	teq	r2, #0
 80a198e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1992:	bf02      	ittt	eq
 80a1994:	0040      	lsleq	r0, r0, #1
 80a1996:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a199a:	3a01      	subeq	r2, #1
 80a199c:	d0f9      	beq.n	80a1992 <__aeabi_fmul+0xce>
 80a199e:	ea40 000c 	orr.w	r0, r0, ip
 80a19a2:	f093 0f00 	teq	r3, #0
 80a19a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a19aa:	bf02      	ittt	eq
 80a19ac:	0049      	lsleq	r1, r1, #1
 80a19ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a19b2:	3b01      	subeq	r3, #1
 80a19b4:	d0f9      	beq.n	80a19aa <__aeabi_fmul+0xe6>
 80a19b6:	ea41 010c 	orr.w	r1, r1, ip
 80a19ba:	e78f      	b.n	80a18dc <__aeabi_fmul+0x18>
 80a19bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a19c0:	ea92 0f0c 	teq	r2, ip
 80a19c4:	bf18      	it	ne
 80a19c6:	ea93 0f0c 	teqne	r3, ip
 80a19ca:	d00a      	beq.n	80a19e2 <__aeabi_fmul+0x11e>
 80a19cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a19d0:	bf18      	it	ne
 80a19d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a19d6:	d1d8      	bne.n	80a198a <__aeabi_fmul+0xc6>
 80a19d8:	ea80 0001 	eor.w	r0, r0, r1
 80a19dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a19e0:	4770      	bx	lr
 80a19e2:	f090 0f00 	teq	r0, #0
 80a19e6:	bf17      	itett	ne
 80a19e8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a19ec:	4608      	moveq	r0, r1
 80a19ee:	f091 0f00 	teqne	r1, #0
 80a19f2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a19f6:	d014      	beq.n	80a1a22 <__aeabi_fmul+0x15e>
 80a19f8:	ea92 0f0c 	teq	r2, ip
 80a19fc:	d101      	bne.n	80a1a02 <__aeabi_fmul+0x13e>
 80a19fe:	0242      	lsls	r2, r0, #9
 80a1a00:	d10f      	bne.n	80a1a22 <__aeabi_fmul+0x15e>
 80a1a02:	ea93 0f0c 	teq	r3, ip
 80a1a06:	d103      	bne.n	80a1a10 <__aeabi_fmul+0x14c>
 80a1a08:	024b      	lsls	r3, r1, #9
 80a1a0a:	bf18      	it	ne
 80a1a0c:	4608      	movne	r0, r1
 80a1a0e:	d108      	bne.n	80a1a22 <__aeabi_fmul+0x15e>
 80a1a10:	ea80 0001 	eor.w	r0, r0, r1
 80a1a14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1a20:	4770      	bx	lr
 80a1a22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1a26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a1a2a:	4770      	bx	lr

080a1a2c <__aeabi_fdiv>:
 80a1a2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1a30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1a34:	bf1e      	ittt	ne
 80a1a36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1a3a:	ea92 0f0c 	teqne	r2, ip
 80a1a3e:	ea93 0f0c 	teqne	r3, ip
 80a1a42:	d069      	beq.n	80a1b18 <__aeabi_fdiv+0xec>
 80a1a44:	eba2 0203 	sub.w	r2, r2, r3
 80a1a48:	ea80 0c01 	eor.w	ip, r0, r1
 80a1a4c:	0249      	lsls	r1, r1, #9
 80a1a4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a1a52:	d037      	beq.n	80a1ac4 <__aeabi_fdiv+0x98>
 80a1a54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a1a58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a1a5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a1a60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1a64:	428b      	cmp	r3, r1
 80a1a66:	bf38      	it	cc
 80a1a68:	005b      	lslcc	r3, r3, #1
 80a1a6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a1a6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a1a72:	428b      	cmp	r3, r1
 80a1a74:	bf24      	itt	cs
 80a1a76:	1a5b      	subcs	r3, r3, r1
 80a1a78:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1a7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a1a80:	bf24      	itt	cs
 80a1a82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a1a86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1a8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a1a8e:	bf24      	itt	cs
 80a1a90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a1a94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1a98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a1a9c:	bf24      	itt	cs
 80a1a9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a1aa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1aa6:	011b      	lsls	r3, r3, #4
 80a1aa8:	bf18      	it	ne
 80a1aaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a1aae:	d1e0      	bne.n	80a1a72 <__aeabi_fdiv+0x46>
 80a1ab0:	2afd      	cmp	r2, #253	; 0xfd
 80a1ab2:	f63f af50 	bhi.w	80a1956 <__aeabi_fmul+0x92>
 80a1ab6:	428b      	cmp	r3, r1
 80a1ab8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1abc:	bf08      	it	eq
 80a1abe:	f020 0001 	biceq.w	r0, r0, #1
 80a1ac2:	4770      	bx	lr
 80a1ac4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1ac8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1acc:	327f      	adds	r2, #127	; 0x7f
 80a1ace:	bfc2      	ittt	gt
 80a1ad0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1ad4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1ad8:	4770      	bxgt	lr
 80a1ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1ade:	f04f 0300 	mov.w	r3, #0
 80a1ae2:	3a01      	subs	r2, #1
 80a1ae4:	e737      	b.n	80a1956 <__aeabi_fmul+0x92>
 80a1ae6:	f092 0f00 	teq	r2, #0
 80a1aea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1aee:	bf02      	ittt	eq
 80a1af0:	0040      	lsleq	r0, r0, #1
 80a1af2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1af6:	3a01      	subeq	r2, #1
 80a1af8:	d0f9      	beq.n	80a1aee <__aeabi_fdiv+0xc2>
 80a1afa:	ea40 000c 	orr.w	r0, r0, ip
 80a1afe:	f093 0f00 	teq	r3, #0
 80a1b02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1b06:	bf02      	ittt	eq
 80a1b08:	0049      	lsleq	r1, r1, #1
 80a1b0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1b0e:	3b01      	subeq	r3, #1
 80a1b10:	d0f9      	beq.n	80a1b06 <__aeabi_fdiv+0xda>
 80a1b12:	ea41 010c 	orr.w	r1, r1, ip
 80a1b16:	e795      	b.n	80a1a44 <__aeabi_fdiv+0x18>
 80a1b18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1b1c:	ea92 0f0c 	teq	r2, ip
 80a1b20:	d108      	bne.n	80a1b34 <__aeabi_fdiv+0x108>
 80a1b22:	0242      	lsls	r2, r0, #9
 80a1b24:	f47f af7d 	bne.w	80a1a22 <__aeabi_fmul+0x15e>
 80a1b28:	ea93 0f0c 	teq	r3, ip
 80a1b2c:	f47f af70 	bne.w	80a1a10 <__aeabi_fmul+0x14c>
 80a1b30:	4608      	mov	r0, r1
 80a1b32:	e776      	b.n	80a1a22 <__aeabi_fmul+0x15e>
 80a1b34:	ea93 0f0c 	teq	r3, ip
 80a1b38:	d104      	bne.n	80a1b44 <__aeabi_fdiv+0x118>
 80a1b3a:	024b      	lsls	r3, r1, #9
 80a1b3c:	f43f af4c 	beq.w	80a19d8 <__aeabi_fmul+0x114>
 80a1b40:	4608      	mov	r0, r1
 80a1b42:	e76e      	b.n	80a1a22 <__aeabi_fmul+0x15e>
 80a1b44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1b48:	bf18      	it	ne
 80a1b4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1b4e:	d1ca      	bne.n	80a1ae6 <__aeabi_fdiv+0xba>
 80a1b50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a1b54:	f47f af5c 	bne.w	80a1a10 <__aeabi_fmul+0x14c>
 80a1b58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a1b5c:	f47f af3c 	bne.w	80a19d8 <__aeabi_fmul+0x114>
 80a1b60:	e75f      	b.n	80a1a22 <__aeabi_fmul+0x15e>
 80a1b62:	bf00      	nop

080a1b64 <__cxa_atexit>:
 80a1b64:	b510      	push	{r4, lr}
 80a1b66:	4c05      	ldr	r4, [pc, #20]	; (80a1b7c <__cxa_atexit+0x18>)
 80a1b68:	4613      	mov	r3, r2
 80a1b6a:	b12c      	cbz	r4, 80a1b78 <__cxa_atexit+0x14>
 80a1b6c:	460a      	mov	r2, r1
 80a1b6e:	4601      	mov	r1, r0
 80a1b70:	2002      	movs	r0, #2
 80a1b72:	f3af 8000 	nop.w
 80a1b76:	bd10      	pop	{r4, pc}
 80a1b78:	4620      	mov	r0, r4
 80a1b7a:	bd10      	pop	{r4, pc}
 80a1b7c:	00000000 	.word	0x00000000

080a1b80 <memcpy>:
 80a1b80:	b510      	push	{r4, lr}
 80a1b82:	1e43      	subs	r3, r0, #1
 80a1b84:	440a      	add	r2, r1
 80a1b86:	4291      	cmp	r1, r2
 80a1b88:	d004      	beq.n	80a1b94 <memcpy+0x14>
 80a1b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1b92:	e7f8      	b.n	80a1b86 <memcpy+0x6>
 80a1b94:	bd10      	pop	{r4, pc}

080a1b96 <memset>:
 80a1b96:	4603      	mov	r3, r0
 80a1b98:	4402      	add	r2, r0
 80a1b9a:	4293      	cmp	r3, r2
 80a1b9c:	d002      	beq.n	80a1ba4 <memset+0xe>
 80a1b9e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1ba2:	e7fa      	b.n	80a1b9a <memset+0x4>
 80a1ba4:	4770      	bx	lr
	...

080a1ba8 <srand>:
 80a1ba8:	b538      	push	{r3, r4, r5, lr}
 80a1baa:	4b12      	ldr	r3, [pc, #72]	; (80a1bf4 <srand+0x4c>)
 80a1bac:	4605      	mov	r5, r0
 80a1bae:	681c      	ldr	r4, [r3, #0]
 80a1bb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1bb2:	b9d3      	cbnz	r3, 80a1bea <srand+0x42>
 80a1bb4:	2018      	movs	r0, #24
 80a1bb6:	f7fe fe87 	bl	80a08c8 <malloc>
 80a1bba:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1bbe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1bc0:	8003      	strh	r3, [r0, #0]
 80a1bc2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1bc6:	8043      	strh	r3, [r0, #2]
 80a1bc8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1bcc:	8083      	strh	r3, [r0, #4]
 80a1bce:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1bd2:	80c3      	strh	r3, [r0, #6]
 80a1bd4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1bd8:	8103      	strh	r3, [r0, #8]
 80a1bda:	2305      	movs	r3, #5
 80a1bdc:	8143      	strh	r3, [r0, #10]
 80a1bde:	230b      	movs	r3, #11
 80a1be0:	8183      	strh	r3, [r0, #12]
 80a1be2:	2201      	movs	r2, #1
 80a1be4:	2300      	movs	r3, #0
 80a1be6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1bec:	2200      	movs	r2, #0
 80a1bee:	611d      	str	r5, [r3, #16]
 80a1bf0:	615a      	str	r2, [r3, #20]
 80a1bf2:	bd38      	pop	{r3, r4, r5, pc}
 80a1bf4:	20000064 	.word	0x20000064

080a1bf8 <strlen>:
 80a1bf8:	4603      	mov	r3, r0
 80a1bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1bfe:	2a00      	cmp	r2, #0
 80a1c00:	d1fb      	bne.n	80a1bfa <strlen+0x2>
 80a1c02:	1a18      	subs	r0, r3, r0
 80a1c04:	3801      	subs	r0, #1
 80a1c06:	4770      	bx	lr

080a1c08 <strncpy>:
 80a1c08:	4603      	mov	r3, r0
 80a1c0a:	b510      	push	{r4, lr}
 80a1c0c:	b142      	cbz	r2, 80a1c20 <strncpy+0x18>
 80a1c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1c12:	3a01      	subs	r2, #1
 80a1c14:	f803 4b01 	strb.w	r4, [r3], #1
 80a1c18:	2c00      	cmp	r4, #0
 80a1c1a:	d1f7      	bne.n	80a1c0c <strncpy+0x4>
 80a1c1c:	441a      	add	r2, r3
 80a1c1e:	e000      	b.n	80a1c22 <strncpy+0x1a>
 80a1c20:	bd10      	pop	{r4, pc}
 80a1c22:	4293      	cmp	r3, r2
 80a1c24:	d002      	beq.n	80a1c2c <strncpy+0x24>
 80a1c26:	f803 4b01 	strb.w	r4, [r3], #1
 80a1c2a:	e7fa      	b.n	80a1c22 <strncpy+0x1a>
 80a1c2c:	bd10      	pop	{r4, pc}

080a1c2e <link_code_end>:
	...

080a1c30 <dynalib_user>:
 80a1c30:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1c40:	0000 0000 494c 3353 4844 0000               ....LIS3DH..

080a1c4c <_ZTV15Adafruit_LIS3DH>:
	...
 80a1c54:	013b 080a 0185 080a 0139 080a 049d 080a     ;.......9.......
 80a1c64:	014d 080a                                   M...

080a1c68 <_ZTV7TwoWire>:
	...
 80a1c70:	08e9 080a 0933 080a 090b 080a 08eb 080a     ....3...........
 80a1c80:	0913 080a 091b 080a 0923 080a 092b 080a     ........#...+...

080a1c90 <_ZTV9IPAddress>:
	...
 80a1c98:	09fb 080a 09eb 080a 09ed 080a 6162 6475     ............baud
 80a1ca8:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1cb8:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1cc8:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1cd8:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1ce8:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1cf8:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1d08:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1d18:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1d28:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1d38:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1d48:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1d58:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1d68:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1d78:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1d88 <_ZTVN5spark12NetworkClassE>:
	...
 80a1d90:	0ac9 080a 0ad3 080a 0add 080a 0ae7 080a     ................
 80a1da0:	0af1 080a 0afd 080a 0b09 080a 0b15 080a     ................
 80a1db0:	0b1d 080a 0b27 080a 0b31 080a               ....'...1...

080a1dbc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a1dbc:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a1dcc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1ddc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1dec:	0000 0000                                   ....

080a1df0 <_ZTV11USARTSerial>:
	...
 80a1df8:	0db9 080a 0e09 080a 0e17 080a 0b95 080a     ................
 80a1e08:	0dcd 080a 0def 080a 0ddb 080a 0e03 080a     ................
 80a1e18:	0dbb 080a 0dbf 080a                         ........

080a1e20 <_ZTV9USBSerial>:
	...
 80a1e28:	0ec1 080a 0f11 080a 0f1f 080a 0b95 080a     ................
 80a1e38:	0efd 080a 0ec3 080a 0ed9 080a 0f0b 080a     ................
 80a1e48:	0eef 080a 0ebd 080a                         ........

080a1e50 <_ZTVN5spark9WiFiClassE>:
	...
 80a1e58:	10fb 080a 10f1 080a 10e7 080a 1059 080a     ............Y...
 80a1e68:	10db 080a 10cf 080a 10c3 080a 10bb 080a     ................
 80a1e78:	10b1 080a 10a7 080a 1063 080a               ........c...

080a1e84 <_ZSt7nothrow>:
 80a1e84:	0000 0000                                   ....

080a1e88 <__sf_fake_stdin>:
	...

080a1ea8 <__sf_fake_stdout>:
	...

080a1ec8 <__sf_fake_stderr>:
	...
 80a1ee8:	0043                                        C.

080a1eea <link_const_variable_data_end>:
	...

080a1eec <link_constructors_location>:
 80a1eec:	080a00b3 	.word	0x080a00b3
 80a1ef0:	080a0135 	.word	0x080a0135
 80a1ef4:	080a04d1 	.word	0x080a04d1
 80a1ef8:	080a04d5 	.word	0x080a04d5
 80a1efc:	080a0511 	.word	0x080a0511
 80a1f00:	080a0529 	.word	0x080a0529
 80a1f04:	080a0ab9 	.word	0x080a0ab9
 80a1f08:	080a0b81 	.word	0x080a0b81
 80a1f0c:	080a0c31 	.word	0x080a0c31
 80a1f10:	080a0d71 	.word	0x080a0d71
 80a1f14:	080a0da5 	.word	0x080a0da5
 80a1f18:	080a1105 	.word	0x080a1105
 80a1f1c:	080a13a5 	.word	0x080a13a5
 80a1f20:	080a1419 	.word	0x080a1419
 80a1f24:	080a14dd 	.word	0x080a14dd
 80a1f28:	080a1561 	.word	0x080a1561
 80a1f2c:	080a15e5 	.word	0x080a15e5
